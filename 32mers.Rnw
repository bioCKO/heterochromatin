\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<32mers>>=
par(mfrow=c(2,2),cex=1.2)
setwd("/Users/alice/Desktop/projects/heterochromatin/trf/chrUn")
A<-read.table("A")
B<-read.table("B")
D<-read.table("D")
E<-read.table("E")
lengthDist<-read.table("chrUn.length_dist")

plot(table(A$V2),main="A",xlab="repeat length",ylab="counts")
abline(v=1000,col="red",lw=3)
plot(table(B$V2),main="B",xlab="repeat length",ylab="counts")
abline(v=1000,col="red",lw=3)
plot(table(D$V2),main="D",xlab="repeat length",ylab="counts")
abline(v=1000,col="red",lw=3)
plot(table(E$V2),main="E",xlab="repeat length",ylab="counts")
abline(v=1000,col="red",lw=3)

plot(table(lengthDist$V2),main="chrUn of chimp female",xlab="contig length distribution",ylab="counts")
abline(v=1000,col="red",lw=3)
@

<<plot heatmap>>=
if (!require("gplots")) {
  install.packages("gplots", dependencies = TRUE)
  library(gplots)
}
if (!require("RColorBrewer")) {
  install.packages("RColorBrewer", dependencies = TRUE)
  library(RColorBrewer)
}
library(heatmap3)

dataOriginal<-as.data.frame(read.table("/Users/alice/Desktop/projects/heterochromatin/32mers/most.abundant.Un.AAACATGGAAATATCTACACCGCTATCTGTAT.nrf.words.aligned.txt",header=TRUE))
sorted <-plyr::arrange(dataOriginal, dataOriginal[,2], decreasing = TRUE)
print(dim(sorted))
plot(table(rowSums(sorted)),ylab="counts",xlab="number of distinct units in one repeat stretch")
data<-sorted[rowSums(sorted)>1, ] #keep only rows where at least two motifs are found
print(dim(data))
data<-data[sort(sample(nrow(data), 5000)), ]
print(dim(data))
data<-data.matrix(data)
my_palette <- colorRampPalette(c("white","red"))(n = 100)

heatmap.2(data[,1:12],dendrogram='column',Rowv=FALSE,Colv=FALSE,trace="none",col=my_palette,key.title ="occurences",notecol="black")
@

<<position bias>>=
par(mfrow=c(2,2),cex=1.1)
setwd("/Users/alice/Desktop/projects/heterochromatin/32mers/")
filenames <- list.files(pattern="*.positions", full.names=FALSE)

for (file in (filenames)) {
tryCatch({
        if (file.size(file) > 0){
        data<-read.table(file, header = F)
        data<-data[sort(sample(nrow(data), 1000)), ]
        boxplot(data$V2 ~ data$V1,col="gold",main=file,ylim=c(0,100),outline=TRUE)
           }
        }, error = function(err) {
            # error handler picks up where error was generated
            print(paste("Read.table didn't work!:  ",err))
        })
}
@

<<gorGor4 versus gorGor5>>=
par(mfrow=c(2,1))
setwd("/Users/alice/Desktop/projects/heterochromatin/32mers/gorGor4_vs_gorGor5")
data<-as.data.frame(read.table("gorGor4x5.merged.txt", header=TRUE))
dim(data)
data<- data[data$gorGor4>=100 | data$gorGor5>=100,]#remove low counts
sorted <-plyr::arrange(data, nchar(as.character(data$unit)), decreasing = FALSE)
dim(sorted)
quantile(sorted$gorGor4)
quantile(sorted$gorGor5)
cor(sorted$gorGor4,sorted$gorGor5)
#plot(sorted$gorGor4,sorted$gorGor5)
#singletons<-data[data$gorGor4<=2 & data$gorGor5<=2,]
male_biased<-c("AAACATGGAAATATCTACACCGCTATCTGTAT","AAACATGGAAATATCTACACCGCCATCTGTAT","AATGG","AAACATGGAAATATCTACACCGCTATCTCTAT","AAACATGGAAATATCTACACAGCCATCTGTAT","AAATATCTACACCGCTATCTGTATGAACATGG","AAATATCTACACCGCCATCTGTATGAACATGG","AATGGAATGTGG")
plot(table(nchar(as.character(sorted$unit))),xlab="unit size")
mers<-sorted[sorted$unit %in% male_biased,]
#plot(nchar(as.character(mers$unit)),mers$gorGor4,xlab="unit size",xlim=c(0,50))
#points(nchar(as.character(mers$unit)),mers$gorGor5,xlab="unit size",col="red")

sorted$rankGorGor4<-length(sorted$gorGor4)-rank(sorted$gorGor4,ties.method ="max")+1
sorted$rankGorGor5<-length(sorted$gorGor5)-rank(sorted$gorGor5,ties.method ="max")+1

plot(sorted$rankGorGor4,sorted$rankGorGor5,pch=21,col="orange",ylim=c(0,340))
interesting<-(sorted[abs(sorted$rankGorGor4-sorted$rankGorGor5)>50,]) #ranks differ by more than 50 positions

library("seqinr")
require(Biostrings)
myLabels<-nchar(as.character(interesting$unit))
gcContent<-unlist(lapply(as.character(interesting$unit),function(x) GC(unlist(strsplit(x,split="")))))
nuclComposition<-as.data.frame(lapply(as.character(interesting$unit),function(x) alphabetFrequency(DNAString(x), baseOnly=TRUE, as.prob=TRUE)))
colnames(nuclComposition)<-interesting$unit
#View(nuclComposition)

rbPal <- colorRampPalette(c('blue','red'))
text(interesting$rankGorGor4,interesting$rankGorGor5+10,labels=myLabels,cex=0.8,col=rbPal(10)[as.numeric(cut(gcContent,breaks = 10))]) #there is whole range of GC content, no obvious bias, except for extremely low GC content
abline(0,1)

hist(gcContent,breaks=50,col="gold",xlim=c(0,1))

par(mfrow=c(6,6))
sapply(colnames(nuclComposition), function(x) pie(nuclComposition[,x],main=x,col=c("green","red","orange","blue","gray"),sub=paste("unit size:",nchar(as.character(x)))))
plot.new()
legend("center", c("A","G"), pt.cex = 3, cex=1.8, inset = c(-5, 
    0), bty = "n",
   fill = c("green","red"))
plot.new()
legend("center", c("C","T"), pt.cex = 2, cex=1.8, inset = c(-5, 
    0), bty = "n",
   fill = c("orange","blue","gray"))

@











\end{document}