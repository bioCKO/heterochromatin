\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<load data for trio analysis>>=
normalized_trios<-density[305:313]
colnames(normalized_trios)<-sapply(strsplit(colnames(normalized_trios),"_"), function(x) x[4])
normalized_trios<-normalized_trios[order(-rowSums(normalized_trios, na.rm=T)),]
print(dim(normalized_trios))
normalized_trios<-normalized_trios[rowSums(normalized_trios)>0, ]
print(dim(normalized_trios))

family_labels<-c("father89OfSon77","mother90OfSon77","son-77","father91OfDaughter78","mother92OfDaughter78","daughter-78","Father-HG","Mother-HG","Son-HG")
normalized_trios<-normalized_trios[,family_labels]
@

<<print relationship>>=
par(mfrow=c(1,3),cex=1.2)
myColors<-c("#2171b5","#6baed6","#bdd7e7","#d94701","#fd8d3c","#fdbe85","#238443","#78c679","#c2e699")

plotProportion<-function(family_members,familyColor) {
  plot(0,xlim=c(0,nrow(normalized_trios)),ylim=c(0,100),col="white",ylab="proportion within the range")
  
  for (perc in seq(1,nrow(normalized_trios),1)) {
    #print(paste(1,perc))
    subset<-normalized_trios[1:perc,family_members]
    #subset<-normalized_trios[perc:(perc+1),family_members]
    subset<-subset[rowSums(subset)>0,]
    print(nrow(subset))

    betweenRange<-table(apply(subset[,1:3],1,isBetweenRange))
    inside<-as.numeric(betweenRange["TRUE"])
    outside<-as.numeric(betweenRange["FALSE"])
    
    if (is.na(inside)) {
      inside<-0
    }
    
    if (is.na(outside)) {
      outside<-0
    }
    
    prop<-as.numeric((inside/(inside+outside))*100) 
    print(prop)
    #abundance<-sum(apply(subset,1,mean))
    
    points(perc,prop,pch=19,col=adjustcolor(familyColor, alpha.f = 0.2))
    
    #points(perc,betweenRange["TRUE"],pch='.',col="black")
    #points(perc,betweenRange["FALSE"]-1,pch='.',col="red")
  }
  abline(h=50)
}

plotProportion(c("father89OfSon77","mother90OfSon77","son-77"),myColors[1])
plotProportion(c("father91OfDaughter78","mother92OfDaughter78","daughter-78"),myColors[4])
plotProportion(c("Father-HG","Mother-HG","Son-HG"),myColors[7])

tmp<-normalized_trios[,family_members]
tmp$within<-apply(tmp,1,isBetweenRange)

par(mfrow=c(2,4))
tmpUpper<-tmp[1:(round(nrow(tmp)/2)),]
tmpLower<-tmp[(round(nrow(tmp)/2)+1):nrow(tmp),]
print(paste(dim(tmp),dim(tmpUpper),dim(tmpLower)))

plot(as.numeric(tmpUpper$within),log(rowSums(tmpUpper[,1:3])),pch=19,col="red",main="high abundance")
print(table(tmpUpper$within))
plot(as.numeric(tmpLower$within),log(rowSums(tmpLower[,1:3])),pch=19,col="blue",main="low abundance")
print(table(tmpLower$within))

tmp<-tmp[order(tmp$within),]
plot(as.numeric(tmp$within),log(rowSums(tmp[,1:3])),pch=19,col="green")
tmpWithin<-tmp[tmp$within==TRUE,]
tmpOutside<-tmp[tmp$within==FALSE,]

@


<<load functions>>=
isBetweenRange<-function(row) {
  parent1<-row[1]
  parent2<-row[2]
  child<-row[3]
  isWithin<-between(child,parent1,parent2) || between(child,parent2,parent1)
  return(isWithin)
}

plotForTrio <- function(trio_frame,family_id){ #Father #Mother #Child
  trio_frame$Father<-(trio_frame[,1]-trio_frame[,3])
  trio_frame$Mother<-(trio_frame[,2]-trio_frame[,3])
  trio_frame$Child<-(trio_frame[,3]-trio_frame[,3])
  print(head(trio_frame))
  
    n=nrow(trio_frame)
    
    xmin<-min(trio_frame$Mother,trio_frame$Father,na.RM=TRUE)
    xmax<-max(trio_frame$Mother,trio_frame$Father,na.RM=TRUE)
    
    plot(head(trio_frame$Father,n=n),n:1,col=adjustcolor("blue", alpha.f = 0.5),pch=20,xlab="Distance from the child (kb/Mb)",ylab="Most abundant repeated motifs",yaxs="i",ylim=c(0,n+1),xlim=c(xmin,xmax),main=family_id,yaxt='n') #father
    abline(v=0) 
    points(head(trio_frame$Mother,n=n),n:1,col=adjustcolor("red", alpha.f = 0.5),pch=20) #add mother
    segments(head(trio_frame$Father,n=n),n:1,head(trio_frame$Mother,n=n),n:1,col="gray")
  
    #text(1:n,head(trio_frame$Father,n=n),labels=head(rownames(trio_frame),n=n),cex=0.4,srt=90,col="black")
    mtext(head(rownames(trio_frame),n=n),cex=0.5,srt=90,col="black",side=4,at=n:1,las=1)
    #legend("bottomleft", 
    #     legend = c("father","mother"),
    #     col = c("blue","red"), 
    #     pch = c(20),
    #     bty = "n"
    #    )
}
@

<<difference between parents and a child 1of2>>=
par(mar=c(5.1,4.1,4.1,12),mfrow=c(2,3),cex=1.2)

trios_subset<-normalized_trios[sapply(c(1:6,14:22),function(x) {repeat_order[x]}),]
nmotifs<-nrow(trios_subset)

plotForTrio(trios_subset[1:nmotifs,c("father89OfSon77","mother90OfSon77","son-77")],"son77 family")
plotForTrio(trios_subset[1:nmotifs,c("father91OfDaughter78","mother92OfDaughter78","daughter-78")],"daughter-78")
plotForTrio(trios_subset[1:nmotifs,c("Father-HG","Mother-HG","Son-HG")],"Son-HG family")

combinations_for_AATGG_fold_change<-as.data.frame(rbind(c("son-77","father89OfSon77"),c("son-77","mother90OfSon77"),c("daughter-78","father91OfDaughter78"),c("daughter-78","mother92OfDaughter78"),c("Son-HG","Father-HG"),c("Son-HG","Mother-HG")))
colnames(combinations_for_AATGG_fold_change)<-c("child","parent")

generational_AATGG_fold_change <-
  apply(combinations_for_AATGG_fold_change, 1, function(x) {
  max(trios_subset["AATGG", x["child"]] / trios_subset["AATGG", x["parent"]],
  trios_subset["AATGG",x["parent"]] / trios_subset["AATGG", x["child"]])
  })
print(cbind(combinations_for_AATGG_fold_change,generational_AATGG_fold_change))
@


<<stacked barplot>>=
myColors<-c("#2171b5","#6baed6","#bdd7e7","#d94701","#fd8d3c","#fdbe85","#238443","#78c679","#c2e699")

density_sums<-apply(normalized_trios[1:nrow(normalized_trios),family_labels],2,sum)
density_sums_withoutGGAAT<-apply(normalized_trios[2:nrow(normalized_trios),family_labels],2,sum)
GGAAT_only<-normalized_trios[1,]

par(mfrow=c(2,3),cex=1.075)
barplot(density_sums_withoutGGAAT,col=myColors,ylab="sum of repeat densities",main=paste("Density of",nrow(normalized_trios)-1,"human repeats, excluding GGAAT"),yaxt="n",las=2) 
axis(2, axTicks(2), format(axTicks(2), scientific = F, big.mark=",")) 
plot.new()
    legend("topright", 
         legend = family_labels,
         col = myColors, 
         pch = c(20),
         bty = "n"
        )
 
# Get the stacked barplot
stacked_density<-as.matrix(rbind(GGAAT_only,density_sums_withoutGGAAT))
#barplot(stacked_density, col=c("#8dd3c7","blue") , border="white", space=0.04, font.axis=2, xlab="group",yaxt="n") 
#WORKAROUND to plot in color
# white bars 
barplot(stacked_density/100000, col='white', axes=F, axisnames=F, yaxp=c(0,1,2), las=2)

# add coloured bars
for (i in 1:ncol(stacked_density)){
    xx = stacked_density/100000
    xx[,-i] <- NA
    colnames(xx)[-i] <- NA
    barplot(xx,col=c('lightgray',myColors[i]), add=T, axes=F,las=2) 
}


axis(2, axTicks(2), format(axTicks(2), scientific = F, big.mark=",")) 
Sys.sleep(1)
@

<<difference between parents and a child 2of2>>=
par(mfrow=c(2,4),cex=1.1)

nmotifs<-nrow(normalized_trios)

proportionBetweenRange <- function(nmotifs,family_subset){
  betweenRange<-table(apply(normalized_trios[1:nmotifs,family_subset],1,isBetweenRange))
  return(prop.table(betweenRange)*100)
}

proportionBetweenRange(100,c("father89OfSon77","mother90OfSon77","son-77"))
proportionBetweenRange(100,c("father91OfDaughter78","mother92OfDaughter78","daughter-78"))
proportionBetweenRange(100,c("Father-HG","Mother-HG","Son-HG"))

makeBetweenPlot<-function(labels,colToUse) {
  plot(seq(1,nmotifs,1),sapply(seq(1,nmotifs,1),function(x) {proportionBetweenRange(x,labels)["TRUE"]}),xlab="#most abundant repeated motifs",ylab="proportion of motifs within the parental range",main=labels[3],ylim=c(0,100),yaxs='i',pch=16,col=colToUse,yaxt="n")
axis(2, at=seq(20,100,20), lab=paste0(seq(20,100,20),"%"), las=TRUE)  
}

makeBetweenPlot(c("father89OfSon77","mother90OfSon77","son-77"),myColors[3])
makeBetweenPlot(c("father91OfDaughter78","mother92OfDaughter78","daughter-78"),myColors[6])
makeBetweenPlot(c("Father-HG","Mother-HG","Son-HG"),myColors[9])

@

<<who are the children most similar to?>>=

plotCorrelations <- function(trio_to_cluster,mlabel,threshold){
  
  colnames(trio_to_cluster)<-gsub("_1.fastq.dat_Header.txt.rawlengths.sortedFilt","",colnames(trio_to_cluster))
  colnames(trio_to_cluster)<-gsub("Homo_sapiens_","",colnames(trio_to_cluster))
  
  print(dim(trio_to_cluster))
  trio_to_cluster<-trio_to_cluster[complete.cases(trio_to_cluster), ]
  trio_to_cluster<-trio_to_cluster[rowSums(trio_to_cluster)>threshold,] #2000
  print(dim(trio_to_cluster))
  
  n<-nrow(trio_to_cluster)
  #n<-500
  d<-as.dist(1-cor(trio_to_cluster[1:n,],method="spearman")) #distance based on correlation
  
  #NOTE: GGAAT makes women very similar to other women and men to men
  #d <- dist((trio_to_cluster[1:n,1:6]), method = "Euclidean") # distance matrix
  print(d)
  
  dst <- data.matrix(d)
  dim <- ncol(dst)
  par(mar=c(12,12,4.1,5),mfrow=c(1,1))
  image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="",main=paste(mlabel,threshold))
  
  axis(1, 1:dim, rownames(dst), cex=0.75, las=3)
  axis(2, 1:dim, rownames(dst), cex=0.75, las=1)
  
  text(expand.grid(1:dim, 1:dim), sprintf("%5.2f", dst), cex=1)

}

#trio_to_cluster<-scale(normalized_trios[,4:9],center=FALSE,scale=FALSE) #normalized_trios

plotCorrelations(normalized_trios[,1:6],"all human dataset without threshold",0)
#plotCorrelations(normalized_trios[,1:9],"all human dataset with threshold",2000) 
#Sys.sleep(0.5)
#plotCorrelations(normalized_trios[,1:9],"all human dataset with threshold",3000) 
#Sys.sleep(0.5)
#plotCorrelations(normalized_trios[,1:9],"all human dataset with threshold",4000) 
#Sys.sleep(0.5)
#plotCorrelations(normalized_trios[,1:9],"all human dataset with threshold",5000) 
#Sys.sleep(0.5)
#plotCorrelations(normalized_trios[,1:9],"all human dataset with threshold",6000) 
#Sys.sleep(0.5)
#plotCorrelations(normalized_trios[,1:9],"all human dataset with threshold",7000) 
#Sys.sleep(0.5)
#plotCorrelations(normalized_trios[,1:9],"all human dataset with threshold",8000)
#plotCorrelations(trios,"small trio dataset")

#plotCorrelations(normalized_trios[rownames(trios),4:9],"all subsampled to match small")
#plotCorrelations(trios[rownames(normalized_trios),],"small subsampled to match all")

#groups <- cutree(fit, k=3) 
#rect.hclust(fit, k=3, border="red")

@


<<>>=

plotDendrogram <- function(trio_to_cluster,mlabel,threshold){
  colnames(trio_to_cluster)<-gsub("_1.fastq.dat_Header.txt.rawlengths.sortedFilt","",colnames(trio_to_cluster))
  colnames(trio_to_cluster)<-gsub("Homo_sapiens_","",colnames(trio_to_cluster))
  
  print(dim(trio_to_cluster))
  trio_to_cluster<-trio_to_cluster[complete.cases(trio_to_cluster), ]
  trio_to_cluster<-trio_to_cluster[rowSums(trio_to_cluster)>threshold,] #2000
  print(dim(trio_to_cluster))
  
  n<-nrow(trio_to_cluster)
  #n<-500
  d<-as.dist(1-cor(trio_to_cluster[1:n,],method="spearman")) #distance based on correlation
  
  print(d)
  #fit <- hclust(d, method="ward.D2") 
  fit <- hclust(d, method="complete") 
  plot(fit,main=mlabel) # display dendogram
}

par(mfrow=c(2,2))
for (i in seq(1,220000,55000)) {
  plotDendrogram(density[308:313],paste("human population; threshold",i),i)
  #plotCorrelations(density[296:313],paste("human population; threshold",i),i)
}
@


<<>>=

funLDA<-function(lda_data,dependent_vector,threshold) {
  lda_data<-lda_data[,colSums(lda_data)>threshold,]
  print(paste("threshold",threshold))
  print(dim(lda_data))
  n<-length(unique(sort(dependent_vector)))
  lda_data$dependent_vector<-dependent_vector
  lda.fit=lda(lda_data$dependent_vector~.,data=lda_data,CV=TRUE,prior=rep(1,n)/n)
  tab <- table(lda_data$dependent_vector, lda.fit$class)
  accuracy<-sum(diag(tab))/sum(tab)*100
  print(accuracy)
  print(tab)
}
humans<-as.data.frame(t(density[1:100,296:313]))
human_family<-c("HGDP","HGDP","HGDP","HGDP","HGDP","HGDP","HGDP","HGDP","HGDP","Ashkenazi","Ashkenazi","Ashkenazi","77","78","77","77","78","78")
human_sex<-c("M","M","M","M","M","M","M","M","M","M","M","F","M","F","M","F","M","F")


for (i in seq(1,10000,5000)) {
  funLDA(humans,human_family,i)
  funLDA(humans,human_sex,i)
}
@
@



\end{document}






