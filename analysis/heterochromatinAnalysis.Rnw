<<LOAD LIBRARIES NEEDED and LOAD DATA>>=
require(dendextend)
require(reshape)
require(hexbin)
require(gplots)
require(e1071)
require(rgl)
require(ggfortify)
require(dendextend)
require(fmsb)
require(grDevices)
require(lattice)
require(randomcoloR)
require(corrr)
require(robustbase)
require(ICC)
require(VennDiagram)
library(VennDiagram)
source("http://www.sthda.com/upload/rquery_cormat.r")
@

<<>>=
working_directory<-"/Users/alice/Desktop/projects/heterochromatin/refactored/"
setwd(working_directory)
@

<<FILTER FOR SPECIES FREQUENCY AND IDENTIFY DESIRED filtered_repeat_motifs>>=
tmp<-frequency

if (length(filtered_files)==length(colnames(frequency))) {
  individual_id<-paste(lapply(strsplit(filtered_files,"\\|"), function(x) paste(x[3],x[2],x[4])))
  colnames(tmp)<-individual_id
} else {
  stop("Data import problem.")
}
unique_col_names <- unique(individual_id)
tmp_abundantRepeatsVsIndividuals <- sapply(unique_col_names, function(name)
{
  subs <- tmp[, colnames(tmp) == name]
  if(is.data.frame(subs))
    apply(subs,1,median)
  else
    subs
})

#MEDIAN ACROSS TECHNICAL REPLICATES
#tmp_abundantSpeciesVsRepeats contains SPECIES as ROWS and REPEATS as columns
tmp_abundantSpeciesVsRepeats<-t(tmp_abundantRepeatsVsIndividuals)
l<-rownames(tmp_abundantSpeciesVsRepeats)
l[grepl("Pan_paniscus",l)==TRUE]<-"Bonobo"
l[grepl("Pan",l)==TRUE]<-"Chimpanzee"
l[grepl("Gorilla",l)==TRUE]<-"Gorilla"
l[grepl("Pongo",l)==TRUE]<-"Orangutan"
l[grepl("Homo",l)==TRUE]<-"Homo"
groupCodes <-l
rownames(tmp_abundantSpeciesVsRepeats)<-groupCodes
colnames(tmp_abundantSpeciesVsRepeats)<-rownames(tmp)

#MEAN ACROSS BIOLOGICAL REPLICATES
tmp_bio<-as.data.frame(t(tmp_abundantSpeciesVsRepeats))
tmp_bio <- sapply(unique(colnames(tmp_bio)), function(name)
{
  subs <- tmp_bio[,colnames(tmp_bio) == name]
  if(is.data.frame(subs))
    apply(subs,1,mean)
  else
    subs
})

require(tibble)

tmp_bio<-as.data.frame(tmp_bio)
tmp_bio<-tmp_bio %>% rownames_to_column('repeat_motif') 
tmp_bio<-filter_at(tmp_bio, vars(-repeat_motif), any_vars(. > 10))
tmp_bio<-tmp_bio %>% column_to_rownames('repeat_motif')

filtered_repeat_motifs<-rownames(tmp_bio)

frequency<-frequency[filtered_repeat_motifs,]
density<-density[filtered_repeat_motifs,]

print(dim(frequency))
print(dim(density))
@



<<DATA FORMATTING>>=
top<-density

if (length(filtered_files)==length(colnames(top))) {
  colnames(top)<-paste(lapply(strsplit(filtered_files,"\\|"), function(x) paste(x[3],x[2],x[4])))
} else {
  stop("Data import problem.")
}
unique_col_names <- unique(colnames(top))
abundantRepeatsVsIndividuals <- sapply(unique_col_names, function(name)
{
  subs <- top[, colnames(top) == name]
  if(is.data.frame(subs))
    apply(subs,1,median)
  else
    subs
})

#abundantRepeatsVsIndividuals contains REPEATS as ROWS and INDIVIDUALS with full names as columns
abundantIndividualsVsRepeats<-t(abundantRepeatsVsIndividuals)

#abundantSpeciesVsRepeats contains SPECIES as ROWS and REPEATS as columns
abundantSpeciesVsRepeats<-t(abundantRepeatsVsIndividuals)
l<-rownames(abundantSpeciesVsRepeats)
l[grepl("Pan_paniscus",l)==TRUE]<-"Bonobo"
l[grepl("Pan",l)==TRUE]<-"Chimpanzee"
l[grepl("Gorilla",l)==TRUE]<-"Gorilla"
l[grepl("Pongo",l)==TRUE]<-"Orangutan"
l[grepl("Homo",l)==TRUE]<-"Homo"
groupCodes <-l
rownames(abundantSpeciesVsRepeats)<-groupCodes
@


<<FIGURE1>>=
par(cex=0.5)
par(mar=c(10,4,4,2))
binary<-abundantSpeciesVsRepeats
binary[binary>0]<-1
binary<-as.data.frame(binary)

unique_species<-c("Homo","Chimpanzee","Bonobo","Gorilla","Orangutan")

binary <- sapply(unique_species, function(name) {
  subs <- binary[rownames(binary) == name,]
  if(is.data.frame(subs))
    colSums(subs)
  else
    subs
})

sample_sizes<-c(11,19,13,27,10) #sample sizes for "Homo","Chimpanzee","Bonobo","Gorilla","Orangutan"
stopifnot(sum(sample_sizes)==length(rownames(abundantSpeciesVsRepeats)))
stopifnot(ncol(binary)==length(unique_species))

binary<-sweep(binary, 2, sample_sizes, `/`)
mycol<-colorRampPalette(c("white","black" ), bias=1)(n=1000) 
heatmap.2(binary[,c("Homo","Chimpanzee","Bonobo","Gorilla","Orangutan")],dendrogram="none", Colv=FALSE, trace='none',col=mycol,cexRow=0.1,cexCol=0.75)
binary<-as.data.frame(binary)

#shared among all species
dim(binary[binary$Chimpanzee>0 & binary$Bonobo>0 & binary$Gorilla>0 & binary$Orangutan>0 & binary$Homo>0,])
table(sort(nchar(rownames((binary[binary$Chimpanzee>0 & binary$Bonobo>0 & binary$Gorilla>0 & binary$Orangutan>0 & binary$Homo>0,])))))

#specific to human
length(rownames((binary[binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Orangutan==0 & binary$Homo>0,])))
#specific to orangutan
length(rownames((binary[binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Orangutan>0 & binary$Homo==0,])))
#specific to gorilla
length(rownames((binary[binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla>0 & binary$Orangutan==0 & binary$Homo==0,])))
#specific to bonobo
length(rownames((binary[binary$Chimpanzee==0 & binary$Bonobo>0 & binary$Gorilla==0 & binary$Orangutan==0 & binary$Homo==0,])))
#specific to chimpanzee
length(rownames((binary[binary$Chimpanzee>0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Orangutan==0 & binary$Homo==0,])))

table(rowSums(binary==1))
@

<<Venn diagram>>=
#human, chimp, bonobo, gorilla, orangutan
plot.new()
keep<-binary[!(binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Orangutan==0 & binary$Homo==0),]

area1<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>0,]))) #human
area2<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>=0,]))) #chimp
area3<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>=0,]))) #bonobo
area4<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>=0,]))) #gorilla
area5<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>=0,]))) #orangutan

n12<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>0,])))
n13<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>0,])))
n14<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>0,])))
n15<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>0,])))
n23<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>=0,])))
n24<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>=0,])))
n25<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>=0,])))
n34<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>=0,])))
n35<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>=0,])))
n45<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>=0,])))

#human, chimp, bonobo, gorilla, orangutan
n123<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>0,])))
n124<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>0,])))
n125<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>0,])))
n134<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>0,]))) #human, bonobo, gorilla
n135<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>0,])))
n145<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,])))
n234<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>=0,])))
n235<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>=0,]))) #chimp, bonobo, orangutan
n245<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>=0,])))
n345<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>=0,])))

n1234<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>0,])))
n1235<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>0,]))) #all but gorilla
n1245<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,]))) #all but bonobo
n1345<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,])))
n2345<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>=0,])))

n12345<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,])))

dim(keep)
sum(area1, area2, area3, area4, area5, n12, n13, n14, n15, n23, n24, n25, n34, n35, n45, n123, n124, n125, n134, n135, n145, n234, n235, n245, n345, n1234, n1235, n1245, n1345, n2345, n12345)

venn.plot <- draw.quintuple.venn(
area1, area2, area3, area4, area5, n12, n13, n14, n15, n23, n24, n25, n34, n35, n45, n123, n124, n125, n134, n135, n145, n234, n235, n245, n345, n1234, n1235, n1245, n1345, n2345, n12345,
category = c("HUMAN", "CHIMP", "BONOBO", "GORILLA", "ORANG"),
fill = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
cat.cex = 1.5,
margin = 0.05,
cex = c(1.5, 1.5, 1.5, 1.5, 1.5, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8,
1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 1, 1, 1, 1, 1.5),
ind = TRUE
);

@

<<FIGURE2>>=
par(mfrow=c(2,1))
library("e1071")

#I think we should maybe first exclude zero counts for each species separately (only there where _all_ individuals have zero counts) and only then calculate variability
#The results will differ based on whether we only include "red" rows or all of them


myDivision <- function(arguments){
  smaller<-min(arguments[1],arguments[2])
  larger<-max(arguments[1],arguments[2])
  stopifnot(smaller>0)
return(larger/smaller)
}

uniq_names<-c("Homo_sapiens","Pan_troglodytes_schweinfurthii","Pan_troglodytes_troglodytes","Pan_troglodytes_ellioti","Pan_troglodytes_verus","Pan_paniscus","Gorilla_gorilla_gorilla","Gorilla_beringei_graueri","Pongo_pygmaeus","Pongo_abelii")

#colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,])!=0

#calculate mean of repeat densities for each individual; individuals must match correct species name (rows) and only non-zero repeat motifs will be considered (columns)
repVariability<-lapply(uniq_names, function(x) rowMeans(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,])!=0],na.rm = TRUE))

sd<-unlist(lapply(repVariability, function(x) round(sd(x),2)))
min<-unlist(lapply(repVariability, function(x) x[which.min(abs(x))]))
max<-unlist(lapply(repVariability, function(x) x[which.max(abs(x))]))
skewness<-unlist(lapply(repVariability, function(x) skewness(x)))
mean_fold_dif<-unlist(lapply(repVariability, function(x) mean(apply(combn(x,2),2, myDivision))))
#human_without_son<-as.vector(repVariability[[1]])[2:length(repVariability[[1]])]
distribution_summary<-as.data.frame(cbind(uniq_names,sd,mean_fold_dif))
distribution_summary<-distribution_summary[order(mean_fold_dif,decreasing=F),]
print(distribution_summary)


myColors<-c(rep("gray30",1),rep("darkgreen",4),rep("dodgerblue",1),rep("firebrick1",2),rep("gold",2))

boxplot(repVariability,names=paste(uniq_names,lengths(repVariability)),las=2,col=myColors,outline=TRUE)

len <- sapply(repVariability,length)
n <- max( len )
len <- n - len
dt<-mapply( function(x,y) c(rep( NA , round(y/2)), x , rep( NA , y-round(y/2)) ) , repVariability , len, SIMPLIFY = TRUE)
rownames(dt)<-NULL
colnames(dt)<-uniq_names
#dt<-as.data.frame(dt)
plot.new()
dotchart(dt,labels="",gcol="black",col="black",lcolor="white",xlab="repeat density per 1 million reads",pch=20,cex=1.2)
plot.new()

uniq_names<-c("Homo","Pan_troglodytes","Pan_paniscus","Gorilla","Pongo")
myColors<-c("gray30","darkgreen","dodgerblue","firebrick1","gold")

repVariabilityBig<-lapply(uniq_names, function(x) rowMeans(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,])!=0],na.rm = TRUE))
boxplot(repVariabilityBig,names=paste(uniq_names,lengths(repVariabilityBig)),las=2,col=myColors,outline=TRUE)

foldStat<-function(species) {
  paste(min(species,na.rm=TRUE),max(species,na.rm=TRUE),max(species,na.rm=TRUE)/min(species,na.rm=TRUE))
}
apply(dt,2,foldStat)

@

<<FIGURE3>>=
par(mfrow=c(1,5),cex=1.01, mai = c(5, 0.48, 0.3, 0.1))
myList<-c("Homo","Chimpanzee","Bonobo","Gorilla","Orangutan")

for (ape in myList) {
  print(ape)
  subset<-abundantSpeciesVsRepeats[grepl(ape,rownames(abundantSpeciesVsRepeats))==TRUE,]
  print(dim(subset))
  reordered<-subset[,order(colSums(-subset,na.rm=TRUE))]
  #print(colnames(reordered)[1:10])
  print(binary[colnames(reordered)[1:10],])
  
  #use only unit length as a label for repeats with long units
  #rnames <- colnames(reordered)
  #rnames[nchar(rnames) > 5] <-
  #  paste0(nchar(colnames(reordered)), "mer")[nchar(rnames) > 5]
  #colnames(reordered) <- rnames
  
  boxplot(reordered[,1:12]/1000,col="gold",las=2,main=paste(ape,"most abundant"))
  #boxplot(log(reordered[,1:12]),ylim=c(6,13),col="gold",las=2,main=paste(ape,"most abundant")) #logs
}
@

<<FIGURE4a,eval=TRUE>>=
par(mfrow=c(2,3))
pca_data<-as.data.frame(na.omit(abundantSpeciesVsRepeats[,]))
pca_data$species<-rownames(pca_data)
pca_data$species<-factor(pca_data$species)
sex<-paste(lapply(strsplit(rownames(abundantIndividualsVsRepeats)," "), function(x) x[3]))
pca_data$sex<-sex
pca_data<-pca_data[with(pca_data, order(species)), ]
#View(pca_data[,(ncol(pca_data)-1):(ncol(pca_data))])

#RUN PRINCIPAL COMPONENT ANALYSIS (PCA) based on SPECIES
pc <- princomp(pca_data[,1:160], cor=FALSE, scores=TRUE)
summary(pc)
plot(pc,type="lines",main="Variance explained") #plot variance explained by each component

#Human (black), bonobo (blue), chimpanzee (green), gorilla (red) and orangutan (orange) are plotted in the 3D space defined by first three principal components

palette(c("blue","darkgreen","red","black","orange")) #pick color scheme
plot3d(pc$scores[,1:3],col=as.numeric(pca_data$species),cex=2,size=10)
legend(x="topleft", legend = levels(pca_data$species), col = unique(as.numeric(pca_data$species)),lty=1,bty = "n")

#plot first two principal components in 2D space
a<-autoplot(prcomp(pca_data[,1:(ncol(pca_data)-2)]),label=FALSE,colour=as.numeric(as.factor(pca_data$species)),shape=as.numeric(as.factor(pca_data$sex))+15,size=3)
a + theme_linedraw()
@

<<FIGURE4b,eval=TRUE>>=
sex<-paste(lapply(strsplit(rownames(abundantIndividualsVsRepeats)," "), function(x) x[3]))
pca_data_sex<-as.data.frame(abundantIndividualsVsRepeats) 
pca_data_sex$sex<-sex
rownames(pca_data_sex)<- make.names(pca_data_sex$sex, unique=TRUE)
pca_data_sex<-pca_data_sex[,1:(ncol(pca_data_sex)-1)] #subsample

#RUN PRINCIPAL COMPONENT ANALYSIS (PCA) based on SEX
pc_sex <- princomp(pca_data_sex[,1:(ncol(pca_data_sex)-1)], cor=TRUE,scores=TRUE)
summary(pc_sex)
#plot(pc_sex,type="lines") #plot variance explained by each component

#Females (pink) and males (black) are plotted in the 3D space defined by fourth, fifth and sixth principal components.
palette(c("black","deeppink"))
plot3d(pc_sex$scores[,4:6],col=as.numeric(factor(sex))+1,cex=2,size=10)
plot.new()
legend(x="topleft", legend = unique(sex), col = unique(as.numeric(as.factor(sex)))+1,lty=1,bty = "n")

@

<<FIGURE5>>=
#Hierarchical clustering does not reproduce the expected species phylogeny

par(mfrow=c(2,1))
sampleToCluster<-abundantIndividualsVsRepeats

#columns_present_in_enough_individuals<-apply(sampleToCluster, MARGIN = 2, function(x) all(x>0))
#columns_present_in_enough_individuals<-names(na.omit(columns_present_in_enough_individuals[columns_present_in_enough_individuals==TRUE]))
#print(length(columns_present_in_enough_individuals))
#sampleToCluster<-scale(sampleToCluster[,columns_present_in_enough_individuals],center=FALSE,scale=TRUE)

l<-rownames(sampleToCluster)
l[grepl("Pan_paniscus",l)==TRUE]<-"Bonobo"
l[grepl("Pan",l)==TRUE]<-"Chimpanzee"
l[grepl("Gorilla",l)==TRUE]<-"Gorilla"
l[grepl("Pongo",l)==TRUE]<-"Orangutan"
l[grepl("Homo",l)==TRUE]<-"Homo"

groupCodes <-l
rownames(sampleToCluster)<-groupCodes
colorCodes <- c(Bonobo="blue", Chimpanzee="darkgreen", Gorilla="red", Orangutan="orange", Homo="black")

dist<-as.dist(1-cor((t(sampleToCluster)),method="spearman")) #distance based on correlation

#OPTIONS FOR CLUSTERING LINKAGE FUNCTIONS: 
#method="ward.D", "ward.D2", "single", "complete", "average" (= UPGMA), "mcquitty" (= WPGMA), "median" (= WPGMC) or "centroid" (= UPGMC).

hc <- hclust(dist,method="ward.D2")
hcSingle <- hclust(dist,method="single") 
dend <- as.dendrogram(hc)
dendSingle <- as.dendrogram(hcSingle)

names_and_sexes<-paste(lapply(strsplit(rownames(abundantIndividualsVsRepeats)," "), function(x) x[1]),lapply(strsplit(rownames(abundantIndividualsVsRepeats)," "), function(x) x[3]))

# Assigning the labels of dendrogram object with new colors:
labels_colors(dend) <- colorCodes[groupCodes][order.dendrogram(dend)]
labels(dend)<-names_and_sexes[order.dendrogram(dend)]
labels_colors(dendSingle) <- colorCodes[groupCodes][order.dendrogram(dendSingle)]
labels(dendSingle)<-names_and_sexes[order.dendrogram(dendSingle)]

plot(dend, main = "Clustering using linkage function 'complete'")
plot(dendSingle, main = "Clustering using linkage function 'single'")
@

<<FIGURE6,eval=FALSE>>=
drawRadarPlot <- function(indivOrder, nIndividuals, ape, myCol) {
  indivOrderRange <- as.data.frame(indivOrder)
  min <- 1
  max <- nIndividuals
  indivOrderRange <-
    rbind(rep(max, ncol(indivOrderRange)), rep(min, ncol(indivOrderRange)), indivOrderRange)
  #transpose
  rownames(indivOrderRange)[1] <- "max"
  rownames(indivOrderRange)[2] <- "min"
  
  rnames <- names(indivOrder)
  rnames[nchar(rnames) > 5] <-
    paste0(nchar(names(indivOrder)), "mer")[nchar(rnames) > 5]
  colnames(indivOrderRange) <- rnames
  
  print(indivOrderRange)
  radarchart(
    indivOrderRange,
    title = ape,
    axistype = 1 ,
    maxmin = TRUE,
    
    #custom polygon
    pcol = rgb(0.2, 0.5, 0.5, 0.9) ,
    #pfcol = rainbow(10),
    pfcol = myCol ,
    plwd = 2 ,
    plty = rep(1, nIndividuals),
    
    #custom the grid
    cglcol = "grey",
    cglty = 1,
    axislabcol = "grey",
    cglwd = 1,
    
    #custom labels
    vlcex = 1,
    caxislabels = seq(max, 1, -1)
  ) #design from http://www.r-graph-gallery.com/142-basic-radar-chart/
}

explData<-abundantRepeatsVsIndividuals
Fsp<-paste(lapply(strsplit(colnames(explData)," "), function(x) x[2]))
#colnames(explData)<-Fsp

for (ape in unique(Fsp)) {
  print(ape)
  t<-explData[,grepl(ape,colnames(explData))==TRUE]
  #print(dim(t))
  n<-dim(t)[2]
  if (!is.null(n) && n>1) {
    t<-as.data.frame(t)
    
    #NOTE: SORTED BY BOTH ROWSUMS (repeat abundances, exclude zero count repeats) and COLSUMS (individual abundances)
    t <-t[order(rowSums(t),decreasing = TRUE), , drop = FALSE]
    
    #sort individuals by rank of cummulative abundances
    t <-t[,order(colSums(t),decreasing = TRUE), drop = FALSE]
  
    #pick only 10 most abundant repeats
    t<-head(t,n=10)
    coloring<-rainbow(max(nchar(rownames(t))),start=0)
    palette(coloring)
    trans<-t(t)
    colnames(t)<-make.unique(colnames(t))
    indivSorted<-as.data.frame(apply(t, 1, function(x) paste(names(x)[order(x)])))
    
    allIndivOrderData<-NULL
    
    par(mfrow=c(3,5))
    for (c in colnames(t)) {
      #indivOrder<-sort(apply(indivSorted,2,function(x) which(x==c)))
      indivOrder<-apply(indivSorted,2,function(x) which(x==c))
      drawRadarPlot(as.data.frame(t(as.data.frame(indivOrder))),length(colnames(t)),gsub( " .*$", "", c),rgb(0.2, 0.5, 0.5, 0.2)) 
      allIndivOrderData<-rbind(allIndivOrderData,indivOrder)
    }
    
    rownames(allIndivOrderData)<-colnames(t)
    allIndivOrderData<-as.data.frame(allIndivOrderData)
    drawRadarPlot(allIndivOrderData,nrow(allIndivOrderData),paste("all",ape,"individuals"),rgb(0.2, 0.5, 0.2, 0.05)) 
  }
}

@

<<FIGURE7,eval=FALSE>>=
par(mfrow=c(2,3))
#DIVIDE BY SPECIES
setwd("/Users/alice/Desktop/projects/heterochromatin/phylogeny")

myList = c("Homo", "Pan_paniscus", "Pan_troglodytes", "Gorilla", "Pongo")
#myList = c("Homo")

returnCorrelationVector <- function(vector) {
  #identify data for which correlation cannot be calculated
  x <- correlate(vector,method="spearman",diagonal = NA)
  #tolerated <- length(colnames(x)) - 1
  #NAcounts <-
  #  apply(x, 1, function(x)
  #    as.numeric(table(is.na(x))["TRUE"]))
  #keep <- NAcounts < (tolerated)
  
  #keep only data for which correlation CAN be calculated
  #subset <- vector[, keep]
  #x <- correlate(subset)
  x <- shave(x)
  corValues <- as.vector(as.numeric(unlist(x)))
  corValues <- corValues[!is.na(corValues)]
  return(corValues)
}



for (ape in myList) {
  print(ape)
  
  corData <- abundantIndividualsVsRepeats[grepl(ape, rownames(abundantIndividualsVsRepeats)) == TRUE, ]
  #get vector of all correlation coefficients that could be calculated
  corValues<-returnCorrelationVector(corData)
  
  #todo: rewrite reshuffling
  permutations<- list()
  for (perm in 1:3){ 
    permutations[[perm]] <-returnCorrelationVector(apply(corData,2,sample))
  }
  
  permutations<-lapply(permutations,sort)
  reshuffledData <- apply(corData,2,sample)
  
  df <- data.frame(x =1:length(length(corData)),
                   F = apply(sapply(permutations, unlist),1,median),
                   L = apply(sapply(permutations, unlist),1,min),
                   U = apply(sapply(permutations, unlist),1,max))
  
  #df<-df[with(df, order(F)),] #sort by F column that denotes means
  df$x<-seq(1,length(df$F),1)
  
  plot(df$x, df$F,ylim=c(-1,1),type='l',col="red",main=ape,ylab = "correlation coefficient")
  
  #make polygon where coordinates start with lower limit and 
  # then upper limit in reverse order
  polygon(c(df$x,rev(df$x)),c(df$L,rev(df$U)),col = "grey75", border = FALSE)
  lines(df$x, df$F, lwd = 2)
  
    points(
    sort(corValues),
    ylab = "correlation coefficient",
    ylim = c(-1, 1),
    pch = 20,
    main = ape,
    xlim = c(0, length(corValues)),
    col = adjustcolor("red", alpha.f = 0.1)
  )
    
    abline(h = 0, col = "red")
  #add red lines on borders of polygon
  #lines(df$x, df$U, col="red",lty=2)
  #lines(df$x, df$L, col="red",lty=2)
}
@

<<sandbox>>=
rownames((keep[keep$Chimpanzee==0 & keep$Bonobo==0 & keep$Gorilla>0 & keep$Orangutan==0 & keep$Homo==0,]))
@


<<FIGURE8>>=

@
