<<LOAD LIBRARIES NEEDED and LOAD DATA>>=
require(dendextend)
require(reshape)
require(hexbin)
require(gplots)
require(e1071)
require(rgl)
require(ggfortify)
require(dendextend)
require(fmsb)
require(grDevices)
require(lattice)
require(randomcoloR)
require(corrr)
require(robustbase)
require(ICC)
require(VennDiagram)
library(VennDiagram)
source("http://www.sthda.com/upload/rquery_cormat.r")
@

<<>>=
working_directory<-"/Users/polly/Desktop/projects/heterochromatin/refactored/"
setwd(working_directory)
@

<<DATA FORMATTING>>=
top<-density

if (length(filtered_files)==length(colnames(top))) {
  colnames(top)<-paste(lapply(strsplit(filtered_files,"\\|"), function(x) paste(x[3],x[2],x[4])))
} else {
  stop("Data import problem.")
}

medianWithoutNA<-function(x) {
   median(x[which(!is.na(x))])
}

unique_col_names <- unique(colnames(top))
abundantRepeatsVsIndividuals <- sapply(unique_col_names, function(name)
{
  subs <- top[, colnames(top) == name]
  if(is.data.frame(subs))
    apply(subs,1,medianWithoutNA)
  else
    subs
})

#abundantRepeatsVsIndividuals contains REPEATS as ROWS and INDIVIDUALS with full names as columns
abundantIndividualsVsRepeats<-t(abundantRepeatsVsIndividuals)

#abundantSpeciesVsRepeats contains SPECIES as ROWS and REPEATS as columns
abundantSpeciesVsRepeats<-t(abundantRepeatsVsIndividuals)
l<-rownames(abundantSpeciesVsRepeats)
l[grepl("Pan_paniscus",l)==TRUE]<-"Bonobo"
l[grepl("Pan",l)==TRUE]<-"Chimpanzee"
l[grepl("Gorilla",l)==TRUE]<-"Gorilla"
l[grepl("abelii",l)==TRUE]<-"Sumatran"
l[grepl("pygmaeus",l)==TRUE]<-"Bornean"
l[grepl("Homo",l)==TRUE]<-"Homo"
groupCodes <-l
rownames(abundantSpeciesVsRepeats)<-groupCodes

print(table(rownames(abundantSpeciesVsRepeats)))
@


<<FIGURE1>>=
par(cex=0.5)
par(mar=c(10,4,4,2))
binary<-abundantSpeciesVsRepeats
binary[binary>0]<-1
binary<-as.data.frame(binary)
print(dim(binary))

Nsubsampled<-5
unique_species<-c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")

binary <- sapply(unique_species, function(name) {
  subs <- binary[rownames(binary) == name,]
  #subs <- subs[sample(seq(1:nrow(subs)),5,replace=FALSE),] #print(dim(subs))
  if(is.data.frame(subs))
    colSums(subs,na.rm = TRUE)
  else
    subs
})

sample_sizes<-c(13,19,13,27,5,5) #sample sizes for "Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean"
#sample_sizes<-c(5,5,5,5,5,5) #sample sizes subsampled

stopifnot(sum(sample_sizes)==length(rownames(abundantSpeciesVsRepeats)))
stopifnot(ncol(binary)==length(unique_species))

binary<-sweep(binary, 2, sample_sizes, `/`)
mycol<-colorRampPalette(c("white","red" ), bias=1)(n=1000) 

heatmap.2(binary[,c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")],dendrogram="none", Colv=FALSE, trace='none',col=mycol,cexRow=0.1,cexCol=0.75)
binary<-as.data.frame(binary)

#shared among all species
dim(binary[binary$Homo>0 & binary$Chimpanzee>0 & binary$Bonobo>0 & binary$Gorilla>0 & binary$Sumatran>0 & binary$Bornean>0,])
table(sort(nchar(rownames((binary[binary$Homo>0 & binary$Chimpanzee>0 & binary$Bonobo>0 & binary$Gorilla>0 & binary$Sumatran>0 & binary$Bornean>0,])))))

#specific to human
human_specific<-length(rownames((binary[binary$Homo>0 & binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Sumatran==0 & binary$Bornean==0,])))
#specific to chimpanzee
chimpanzee_specific<-length(rownames((binary[binary$Homo==0 & binary$Chimpanzee>0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Sumatran==0 & binary$Bornean==0,])))
#specific to bonobo
bonobo_specific<-length(rownames((binary[binary$Homo==0 & binary$Chimpanzee==0 & binary$Bonobo>0 & binary$Gorilla==0 & binary$Sumatran==0 & binary$Bornean==0,])))
#specific to gorilla
gorilla_specific<-length(rownames((binary[binary$Homo==0 & binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla>0 & binary$Sumatran==0 & binary$Bornean==0,])))
#specific to Sumatran
Sumatran_specific<-length(rownames((binary[binary$Homo==0 & binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Sumatran>0 & binary$Bornean==0,])))
#specific to Bornean
Bornean_specific<-length(rownames((binary[binary$Homo==0 & binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Sumatran==0 & binary$Bornean>0,])))


print(table(rowSums(binary==1)))
@


<<binary_subsampling>>=
#Do we get consistent result for 5 individuals per species?

@


<<Venn diagram>>=
#human, chimp, bonobo, gorilla, orangutan
plot.new()
keep<-binary[!(binary$Chimpanzee==0 & binary$Bonobo==0 & binary$Gorilla==0 & binary$Orangutan==0 & binary$Homo==0),]

area1<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>0,]))) #human
area2<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>=0,]))) #chimp
area3<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>=0,]))) #bonobo
area4<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>=0,]))) #gorilla
area5<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>=0,]))) #orangutan

n12<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>0,])))
n13<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>0,])))
n14<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>0,])))
n15<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>0,])))
n23<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>=0,])))
n24<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>=0,])))
n25<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>=0,])))
n34<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>=0,])))
n35<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>=0,])))
n45<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>=0,])))

#human, chimp, bonobo, gorilla, orangutan
n123<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>=0 & keep$Homo>0,])))
n124<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>0,])))
n125<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>0,])))
n134<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>0,]))) #human, bonobo, gorilla
n135<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>0,])))
n145<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,])))
n234<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>=0,])))
n235<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>=0,]))) #chimp, bonobo, orangutan
n245<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>=0,])))
n345<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>=0,])))

n1234<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>=0 & keep$Homo>0,])))
n1235<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>=0 & keep$Orangutan>0 & keep$Homo>0,]))) #all but gorilla
n1245<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>=0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,]))) #all but bonobo
n1345<-length(rownames((keep[keep$Chimpanzee>=0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,])))
n2345<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>=0,])))

n12345<-length(rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,])))

dim(keep)
sum(area1, area2, area3, area4, area5, n12, n13, n14, n15, n23, n24, n25, n34, n35, n45, n123, n124, n125, n134, n135, n145, n234, n235, n245, n345, n1234, n1235, n1245, n1345, n2345, n12345)

venn.plot <- draw.quintuple.venn(
area1, area2, area3, area4, area5, n12, n13, n14, n15, n23, n24, n25, n34, n35, n45, n123, n124, n125, n134, n135, n145, n234, n235, n245, n345, n1234, n1235, n1245, n1345, n2345, n12345,
category = c("HUMAN", "CHIMP", "BONOBO", "GORILLA", "ORANG"),
fill = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
cat.cex = 1.5,
margin = 0.05,
cex = c(1.5, 1.5, 1.5, 1.5, 1.5, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8,
1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 1, 1, 1, 1, 1.5),
ind = TRUE
);

@

<<FIGURE2>>=
par(mfrow=c(2,1))
library("e1071")

#I think we should  first exclude zero counts for each species separately (only there where _all_ individuals have zero counts) and only then calculate variability/density
#The results will differ based on whether we only include "black" rows or all of them


myDivision <- function(arguments){
  smaller<-min(arguments[1],arguments[2])
  larger<-max(arguments[1],arguments[2])
  stopifnot(smaller>0)
return(larger/smaller)
}

divideBy100 <- function(argument){
return(argument/100)
}

uniq_names_subspecies<-c("Homo_sapiens","Pan_troglodytes_schweinfurthii","Pan_troglodytes_troglodytes","Pan_troglodytes_ellioti","Pan_troglodytes_verus","Pan_paniscus","Gorilla_gorilla_gorilla","Gorilla_beringei_graueri","Pongo_pygmaeus","Pongo_abelii")

#colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,])!=0

#calculate sum of repeat densities for each individual; individuals must match correct species name (rows) and only non-zero repeat motifs will be considered (columns)
repVariability<-lapply(uniq_names_subspecies, function(x) rowSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,])!=0],na.rm = TRUE))
repVariability<-lapply(repVariability,divideBy100) #normalize 100bp reads into bps

yellow_group_GGAAT_related<-c("AATGG","AATGGAGTGG","AAGTGGAATGG","AATGGAATGTG","AAAGTGGAATGG","AACGTGGAATGG","AATGGAATGTGG","AATGGAATGGAGTGG","AATGGAGTGGAGTGG","AATCGAATGGAATGG","AATGGAATGGAATGTGG","AATGGAATGGAATGGAATGTGG","AAATGGACTCGAATGGAATCATC","AAATGGAATCGAATGGAATCATC","AATCATCGAATGGAATCGAATGG","AATCATCGAATGGACTCGAATGG","AATCATCATGAATGGAATCGAATGG","AAATGGAATCGAATGGAATCATCATC","AAATGGAATCGAATGTAATCATCATC","AATCATCATCGAATGGAATCGAATGG")
green_group_32mers<-c("AAACATGGAAATATCTACACAGCCATCTGTAT","AAACATGGAAATATCTACACCACCATCTGTAT","AAACATGGAAATATCTACACCACTATCTGTAT","AAACATGGAAATATCTACACCGCCATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTGT","AAACATGGAAATATCTACACTGCCATCTGTAT","AAACATGGAAATATCTACACTGCTATCTGTAT","AAACATGGAAATATCTACACCGCGATCTGTAT","AAACATGGAAATATCTACACCGCCATCTCTAT","AAACATGGAAATATCTACACCGCTATCTCTAT","AAATATCTACACAGCTATCTGTATGAACATGG","AAATATCTACACCACTATCTGTATGAACATGG","AAATATCTACACCGCTATCTGTATGAACATGG","AAATATCTACACCGCCATCTGTATGAACATGG","AAATATCTACACCGCTATCTGCATGAACATGG")
white_group<-c("AAAG","ACTCC","AAACATGTAAATATTTACACAGAATCTGTAT")

repeatDensityForAMotifSpecies <- function(motif){
  rd<-paste(uniq_names_species,lapply(uniq_names_species, function(x) round(mean(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,motif],na.rm = TRUE)/100000,2))) #todo, change normalization coefficients
return(rd)
}

repeatDensityForAMotifSubSpecies <- function(motif){
  rd<-paste(uniq_names_subspecies,lapply(uniq_names_subspecies, function(x) round(mean(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,motif],na.rm = TRUE)/100000,0))) #todo, change normalization coefficients
return(rd)
}

#SHOW DENSITIES FOR EACH SPECIES SEPARATELY
#AATGG
repeatDensityForAMotifSpecies("AATGG")

#yellow_group_GGAAT_related
denisities_for_yellow_group_GGAAT_related<-lapply(yellow_group_GGAAT_related,repeatDensityForAMotifSpecies)
lapply(seq_along(1:6),function(i)
         unlist(lapply(denisities_for_yellow_group_GGAAT_related, `[[`, i)))
#green_group_32mers
denisities_for_green_group_32mers<-lapply(green_group_32mers,repeatDensityForAMotifSpecies)
lapply(seq_along(1:6),function(i)
         unlist(lapply(denisities_for_green_group_32mers, `[[`, i)))

#old example: density of AATGG repeat is calculated like this: paste(uniq_names_subspecies,lapply(uniq_names_subspecies, function(x) round(mean(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,"AATGG"],na.rm = TRUE)/100,0)))


#table(unlist(as.data.frame(apply(-density,2,rank))["AATGG",]))

#DESCRIPTIVE STATISTICS
sd<-unlist(lapply(repVariability, function(x) round(sd(x),2)))
min<-unlist(lapply(repVariability, function(x) round(x[which.min(abs(x))],0)))
max<-unlist(lapply(repVariability, function(x) round(x[which.max(abs(x))],0)))
skewness<-unlist(lapply(repVariability, function(x) skewness(x)))

mean_fold_dif<-unlist(lapply(repVariability, function(x) mean(apply(combn(x,2),2, myDivision))))
print(mean_fold_dif)


par(mfrow=c(2,1))
#human_without_son<-as.vector(repVariability[[1]])[2:length(repVariability[[1]])]
distribution_summary<-as.data.frame(cbind(uniq_names_subspecies,as.numeric(min),as.numeric(max),sd,mean_fold_dif))
colnames(distribution_summary)<-c("species","min","max","sd","mean_fold_dif")
distribution_summary<-distribution_summary[order(mean_fold_dif,decreasing=F),]
print(distribution_summary)


myColors<-c(rep("gray30",1),rep("darkgreen",4),rep("dodgerblue",1),rep("firebrick1",2),rep("gold",2))

#DRAW BOXPLOT OF REPEAT DENSITIES
boxplot(repVariability,names=paste(uniq_names_subspecies,lengths(repVariability)),las=2,col=sapply(myColors,adjustcolor,alpha=0.4),outline=TRUE)
stripchart(repVariability, vertical = TRUE, 
    method = "jitter", add = TRUE, pch = 20, col = 'blue')

#CALCULATE MEANS OF REPEAT DENSITIES
print(paste(uniq_names_subspecies,lapply(repVariability,mean)))

len <- sapply(repVariability,length)
n <- max( len )
len <- n - len
dt<-mapply( function(x,y) c(rep( NA , round(y/2)), x , rep( NA , y-round(y/2)) ) , repVariability , len, SIMPLIFY = TRUE)
rownames(dt)<-NULL
colnames(dt)<-uniq_names_subspecies
#dt<-as.data.frame(dt)
plot.new()
dotchart(dt,labels="",gcol="black",col="black",lcolor="white",xlab="repeat density per 1 million bps",pch=20,cex=1.2)
plot.new()

uniq_names_species<-c("Homo","Pan_troglodytes","Pan_paniscus","Gorilla","Pongo_abelii","Pongo_pygmaeus")
myColors<-c("gray30","darkgreen","dodgerblue","firebrick1","gold")

repVariabilityBig<-lapply(uniq_names_species, function(x) rowSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,])!=0],na.rm = TRUE))
repVariabilityBig<-lapply(repVariabilityBig,divideBy100) #normalize 100bp reads into bps

#DRAW BOXPLOT OF REPEAT DENSITIES
boxplot(repVariabilityBig,names=paste(uniq_names_species,lengths(repVariabilityBig)),las=2,col=myColors,outline=TRUE)
#CALCULATE MEANS OF REPEAT DENSITIES
print(paste(uniq_names_species,lapply(repVariabilityBig,mean)))
@

<<calculations with fold differencies>>=
getMeanFoldDif <- function(list_to_pick_pairs_from) {
  return(mean(apply(combn(list_to_pick_pairs_from,2),2, myDivision)))
}

getTuples <- function(full_set,subsetn) {
  tuple_df<-apply(combn(full_set,subsetn),2,getMeanFoldDif) #e.g. if n=5, we are picking 5 individuals to calculate mean pairwise fold difference
  tuple_df<-as.vector(tuple_df)
  
  real_fold_difference<-getMeanFoldDif(full_set)
  
  splabel=unlist(strsplit(names(full_set)," "))
  
  hist(as.numeric(tuple_df),col="gold",xlab="Mean fold difference for sets of tuples",main=paste("Average fold difference for randomly picked",subsetn,"individuals out of",length(full_set),";\n using",length(tuple_df),"subsets"),sub=splabel[2])
  abline(v=real_fold_difference,col="red",lw=3)
  return(real_fold_difference)
}

par(mfrow=c(3,2))
lapply(repVariabilityBig,function(x) getTuples(x,5))

@

<<FIGURE3>>=
par(mfrow=c(1,1),cex=1.01,mai = c(5, 1, 0.3, 0.1))
myList<-c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")

most_abundant_for_each_species<-NULL
nrepeats_subset<-100

for (ape in myList) {
  print(ape)
  subset<-abundantSpeciesVsRepeats[grepl(ape,rownames(abundantSpeciesVsRepeats))==TRUE,]
  print(dim(subset))
  reordered<-subset[,order(colMeans(-subset,na.rm=TRUE))]
  #print(colnames(reordered)[1:10])
  print(binary[colnames(reordered)[1:nrepeats_subset],])
  
  #use only unit length as a label for repeats with long units
  #rnames <- colnames(reordered)
  #rnames[nchar(rnames) > 5] <-
  #  paste0(nchar(colnames(reordered)), "mer")[nchar(rnames) > 5]
  #colnames(reordered) <- rnames
  
  #=boxplot(reordered[,1:12]/100,col="gold",las=2,main=paste(ape,"most abundant"))
  boxplot(reordered[,1:nrepeats_subset],col="gold",las=2,main=paste(ape,"most abundant")) #logs
  #ylim=c(6,16)
  most_abundant_for_each_species[ape]<-list(colnames(log(reordered[,1:500])))
}

@

<<most abundant>>=
par(cex=0.5)
par(mar=c(5,0,1,2))
matrix_of_most_abundant<-as.data.frame(sapply(most_abundant_for_each_species[], function(x) { x[1:12] }))
unique_list_of_most_abundant_for_each_species<-unique(as.vector(t(matrix_of_most_abundant)))

data_for_heatmap<-abundantSpeciesVsRepeats[,unique_list_of_most_abundant_for_each_species]

data_for_heatmap[data_for_heatmap == 0] <- NA
data_for_heatmap<-data_for_heatmap[,order(colSums(is.na(data_for_heatmap)),colSums(data_for_heatmap,na.rm=TRUE))]

data_for_heatmap<-as.data.frame(data_for_heatmap)
print(colnames(data_for_heatmap))


my_palette <- colorRampPalette(c("lightsalmon", "firebrick2"))(n = 1000)

heatmap.2(t(log(data_for_heatmap)),dendrogram="none", Colv=TRUE, Rowv=FALSE, trace='none',col=my_palette,cexCol=0.5,keysize=0.75,main=paste("unique list of ",length(unique_list_of_most_abundant_for_each_species),"repeats with highest repeat density; log")) #,cexRow=0.1,cexCol=0.75

data_for_heatmap$species<-rownames(data_for_heatmap)
density_mean_per_species<-data_for_heatmap %>% group_by(species) %>% summarise_all(mean, na.rm = TRUE)
#apply(density_mean_per_species[,-1],1,myMean)
rownames(density_mean_per_species)<-density_mean_per_species$species
density_mean_per_species<-as.data.frame(density_mean_per_species)

lmat = rbind(c(0,3),c(2,1),c(0,4))
lwid = c(1.5,4)
lhei = c(1.5,2,1)
layout(mat = lmat, widths = lwid, heights = lhei)

roundedStr <- function(arg1){
  rounded<-round(as.numeric(as.character(arg1)))/100000
  formatted<-as.numeric(format(rounded,format="f", big.mark=",", nsmall = 2, digits=0))
  #print(paste("formatted",formatted))
  small_numbers_correction<-as.character(paste(ifelse(formatted<0.01, "<0.01", formatted),""))
  #print(paste("small_numbers_correction",small_numbers_correction))
return(small_numbers_correction)
}

repeat_order <- c(yellow_group_GGAAT_related,green_group_32mers,white_group)

#check that loaded repeat names match those from the dataframe
original_names<-sort(as.character(colnames(density_mean_per_species[2:ncol(density_mean_per_species)])))
loaded_names<-sort(as.character(repeat_order))
stopifnot(original_names==loaded_names)

cell_values<-t(density_mean_per_species[,-1]) 
cell_values<-cell_values[repeat_order,] #REORDER REPEAT ORDER

cell_labels=data.frame(lapply(as.data.frame(cell_values),roundedStr), stringsAsFactors=FALSE)

plot.new()
heatmap.2(log(cell_values),cellnote=cell_labels,notecol="white",dendrogram="none", Colv=TRUE, Rowv=FALSE, trace='none',col=my_palette,cexCol=0.5,keysize=0.75,main=paste("unique list of ",length(unique_list_of_most_abundant_for_each_species),"repeats with highest repeat density; log"))

@

<<density versus level of shared repeats,eval=TRUE>>=

denshar<-data_for_heatmap
#dlabels<-colnames(denshar)
#dlabels[grepl("Pan_paniscus",dlabels)==TRUE]<-"Bonobo"
#dlabels[grepl("Pan",dlabels)==TRUE]<-"Chimpanzee"
#dlabels[grepl("Gorilla",dlabels)==TRUE]<-"Gorilla"
#dlabels[grepl("Pongo_pygmaeus",dlabels)==TRUE]<-"Bornean"
#dlabels[grepl("Pongo_abelii",dlabels)==TRUE]<-"Sumatran"
#dlabels[grepl("Homo",dlabels)==TRUE]<-"Homo"


#plot(colSums(denshar!=0),colSums(denshar),ylab="density per sample",xlab="number of detected repeated motifs in a sample",col=factor(dlabels),pch=19)
#legend('topleft', legend = levels(factor(dlabels)), col = 1:6, cex = 0.8, pch = 19)

plot((nrow(denshar)-colSums(is.na(denshar))),log(colMeans(denshar,na.rm=TRUE)),ylab="log of average density of repeated motif across all individuals",xlab="number of individuals that carry this repeated motif",col="blue",pch=19,cex=1.5,cex.lab=1.5,main="39 most abundant repeated motifs")


denshar<-density_mean_per_species
colors_shared<-as.factor(colSums(is.na(denshar[,2:ncol(denshar)]))>0)
plot(1:39,log(colMeans(denshar[,2:ncol(denshar)],na.rm=TRUE)),ylab="log of average density of repeated motif across 6 species",xlab="index of repeated motif",pch=19,cex=1.5,cex.lab=1.5,main="39 most abundant repeated motifs",col=colors_shared)
legend(22, 14, legend=c("repeated motifs in all 6 species", "repeated motifs shared among subset of species"),col=c("black", "red"), pch=19)

species_specific<-c(human_specific,chimpanzee_specific,bonobo_specific,gorilla_specific,Sumatran_specific,Bornean_specific)
mean_repeat_density_for_species<-as.numeric(lapply(repVariabilityBig,mean))

plot(log(mean_repeat_density_for_species),log(species_specific),xlab="log of mean repeat density for a species",ylab="log of number of species-specific repeats",col="blue",cex.lab=1.4,cex.axis=1.4) #"Homo"       "Chimpanzee" "Bonobo"     "Gorilla"    "Sumatran"   "Bornean" 
text(log(mean_repeat_density_for_species),log(species_specific)+0.15,labels=myList,cex=1.4)
@


<<FIGURE4,eval=TRUE>>=
library("ggplot2")
library("ggfortify")
library("plot3D")
library("rgl")
pca_data<-as.data.frame(na.omit(abundantSpeciesVsRepeats[,]))
pca_data$species<-rownames(pca_data)
pca_data$species<-factor(pca_data$species)
sex<-paste(lapply(strsplit(rownames(abundantIndividualsVsRepeats)," "), function(x) x[3]))
pca_data$sex<-sex
pca_data<-pca_data[with(pca_data, order(species)), ]
#View(pca_data[,(ncol(pca_data)-1):(ncol(pca_data))])

#Human (black), bonobo (blue), chimpanzee (green), gorilla (red) and orangutan (gold and orange) are plotted in the 3D space defined by first three principal components

#unique(gsub("\\..*","",rownames(pca_data[,1:(ncol(pca_data)-2)])))
#         "Bonobo" "Chimpanzee" "Gorilla" "Homo" "Orangutan" 
palette(c("blue","gold","darkgreen","red","black","orange")) #pick color scheme

#plot first two principal components in 2D space
pca_calculation<-prcomp(pca_data[,unique_list_of_most_abundant_for_each_species])
a<-autoplot(pca_calculation,label=FALSE,colour=as.numeric(as.factor(pca_data$species)),shape=as.numeric(as.factor(pca_data$sex))+15,size=3)
a + theme_linedraw()
print(summary(pca_calculation))

#plot first three principal components in 3D space
pc <- princomp(pca_data[,unique_list_of_most_abundant_for_each_species], cor=FALSE, scores=TRUE)
summary(pc)
#plot(pc,type="lines",main="Variance explained") #plot variance explained by each component
plot3d(pc$scores[,1:3],col=as.numeric(pca_data$species),cex=2,size=10)
legend(x="topleft", legend = levels(pca_data$species), col = unique(as.numeric(pca_data$species)),lty=1,bty = "n")

#RUN PRINCIPAL COMPONENT ANALYSIS (PCA) based on SEX
pc_sex <- princomp(pca_data_sex[,1:(ncol(pca_data_sex)-1)], cor=TRUE,scores=TRUE)
summary(pc_sex)
#plot(pc_sex,type="lines") #plot variance explained by each component

#Females (pink) and males (black) are plotted in the 3D space defined by fourth, fifth and sixth principal components.
palette(c("black","deeppink"))
plot3d(pc$scores[,1:3],col=as.numeric(factor(sex))+1,cex=2,size=10)
plot.new()
legend(x="topleft", legend = unique(sex), col = unique(as.numeric(as.factor(sex)))+1,lty=1,bty = "n")


##################################################

#PREDICT SPECIES BASED ON REPEATS USING LDA
library(MASS)

most_abundant_pca_data<-pca_data[,c(unique_list_of_most_abundant_for_each_species,"species","sex")]

plot.new()
number_of_repeats<-length(unique_list_of_most_abundant_for_each_species)
plot.window(xlim = c(0, number_of_repeats), ylim = c(0, 100), xlab="number of repeats used",ylab="accuracy")
box()
axis(1)
axis(4)

for (i in seq(2, number_of_repeats, 1)) {
  lda.fit=lda(most_abundant_pca_data$species~.,data=most_abundant_pca_data[,1:i],CV=TRUE) 
  tab <- table(most_abundant_pca_data$species, lda.fit$class)
  accuracy<-sum(diag(tab))/sum(tab)*100
  print(paste(i,accuracy))
  points(i,accuracy)
  print(tab)
  plot(t(tab),main=paste("number of repeats",i))
}

#PREDICT SPECIES BASED ON REPEATS USING RANDOM FOREST
library (randomForest)
rf=randomForest(most_abundant_pca_data$species~.,data=most_abundant_pca_data[,1:(ncol(most_abundant_pca_data)-2)],importance=TRUE) #
importance(rf) #textual representation of how important the variables were
varImpPlot(rf) #graphical representation
print(rf)
@

<<chimpanzee_bonobo_geography>>=
library(ggfortify)
library(as.color)
chimpbono<-abundantIndividualsVsRepeats
l<-rownames(chimpbono)
l[grepl("Pan",rownames(chimpbono))==FALSE]<-"other" #exclude all non-Pan species
#l[grepl("Pan_paniscus",rownames(chimpbono))==TRUE]<-"other" #exclude bonobo

l[grepl("Pan_troglodytes_ellioti",rownames(chimpbono))==TRUE]<-"Pan_troglodytes_ellioti" #"Nigeria-Cameroon"
l[grepl("Pan_troglodytes_verus",rownames(chimpbono))==TRUE]<-"Pan_troglodytes_verus" #"Westernll"
l[grepl("Pan_troglodytes_troglodytes",rownames(chimpbono))==TRUE]<-"Pan_troglodytes_troglodytes" #"Central"
l[grepl("Pan_troglodytes_schweinfurthii",rownames(chimpbono))==TRUE]<-"Pan_troglodytes_schweinfurthii" #"Eastern"
l[grepl("Pan_paniscus",rownames(chimpbono))==TRUE]<-"Pan_paniscus" #"Bonobo"

chimpbono<-chimpbono[l!="other",]
rownames(chimpbono)<-l[l!="other"]
l<-l[l!="other"]

pca_chimpbono<-as.data.frame(chimpbono)
rownames(pca_chimpbono) = make.names(rownames(pca_chimpbono), unique=TRUE)
pca_chimpbono$species<-l

#pca_chimpbono_data<-prcomp(pca_chimpbono[,1:2])
#print(dim(pca_chimpbono[,1:2]))

pca_chimpbono_data<-prcomp(pca_chimpbono[,unique_list_of_most_abundant_for_each_species])
print(dim(pca_chimpbono[,unique_list_of_most_abundant_for_each_species]))

a<-NULL
a<-autoplot(pca_chimpbono_data,label=TRUE,size=2,shape=FALSE,colour=as.color(pca_chimpbono$species,alpha=1,seed=423017885))
a + theme_linedraw()


@

<<FIGURE5>>=
#Hierarchical clustering does not reproduce the expected species phylogeny

par(mfrow=c(2,1))
sampleToCluster<-abundantIndividualsVsRepeats

#sampleToCluster<-sampleToCluster[,1:16] #only 16 most common repeats
#sampleToCluster<-sampleToCluster[,rownames((keep[keep$Chimpanzee>0 & keep$Bonobo>0 & keep$Gorilla>0 & keep$Orangutan>0 & keep$Homo>0,]))] #shared repeats
#sampleToCluster<-sampleToCluster[,nchar(colnames(sampleToCluster))==32] #exluding 32-mers

#present in both orangutans, but absent from the other great ape species
#dim(sampleToCluster[,(sampleToCluster["Bornean",]>0 & sampleToCluster["Sumatran",]>0 & sampleToCluster["Homo",]==0 & sampleToCluster["Gorilla",]==0 & sampleToCluster["Chimpanzee",]==0) & sampleToCluster["Bonobo",]==0]) WARNING: chimpanzee has weird bracketing

#columns_present_in_enough_individuals<-apply(sampleToCluster, MARGIN = 2, function(x) all(x>0))
#columns_present_in_enough_individuals<-names(na.omit(columns_present_in_enough_individuals[columns_present_in_enough_individuals==TRUE]))
#print(length(columns_present_in_enough_individuals))
#sampleToCluster<-scale(sampleToCluster[,columns_present_in_enough_individuals],center=FALSE,scale=TRUE)

l<-rownames(sampleToCluster)
l[grepl("Pan_paniscus",l)==TRUE]<-"Bonobo"
l[grepl("Pan",l)==TRUE]<-"Chimpanzee"
l[grepl("Gorilla",l)==TRUE]<-"Gorilla"
#l[grepl("Pongo",l)==TRUE]<-"Orangutan"
l[grepl("Pongo_pygmaeus",l)==TRUE]<-"Bornean"
l[grepl("Pongo_abelii",l)==TRUE]<-"Sumatran"
l[grepl("Homo",l)==TRUE]<-"Homo"

groupCodes <-l
rownames(sampleToCluster)<-groupCodes
colorCodes <- c(Bonobo="blue", Chimpanzee="darkgreen", Gorilla="red", Orangutan="orange", Homo="black")

dist<-as.dist(1-cor((t(sampleToCluster)),method="spearman")) #distance based on correlation

#OPTIONS FOR CLUSTERING LINKAGE FUNCTIONS: 
#method="ward.D", "ward.D2", "single", "complete", "average" (= UPGMA), "mcquitty" (= WPGMA), "median" (= WPGMC) or "centroid" (= UPGMC).

hc <- hclust(dist,method="ward.D2")
hcSingle <- hclust(dist,method="single") 
dend <- as.dendrogram(hc)
dendSingle <- as.dendrogram(hcSingle)

names_and_sexes<-paste(lapply(strsplit(rownames(abundantIndividualsVsRepeats)," "), function(x) x[1]),lapply(strsplit(rownames(abundantIndividualsVsRepeats)," "), function(x) x[3]))

# Assigning the labels of dendrogram object with new colors:
labels_colors(dend) <- colorCodes[groupCodes][order.dendrogram(dend)]
labels(dend)<-names_and_sexes[order.dendrogram(dend)]
labels_colors(dendSingle) <- colorCodes[groupCodes][order.dendrogram(dendSingle)]
labels(dendSingle)<-names_and_sexes[order.dendrogram(dendSingle)]

plot(dend, main = "Clustering using linkage function 'complete'")
plot(dendSingle, main = "Clustering using linkage function 'single'")
@

<<FIGURE6,eval=FALSE>>=
drawRadarPlot <- function(indivOrder, nIndividuals, ape, myCol) {
  indivOrderRange <- as.data.frame(indivOrder)
  min <- 1
  max <- nIndividuals
  indivOrderRange <-
    rbind(rep(max, ncol(indivOrderRange)), rep(min, ncol(indivOrderRange)), indivOrderRange)
  #transpose
  rownames(indivOrderRange)[1] <- "max"
  rownames(indivOrderRange)[2] <- "min"
  
  rnames <- names(indivOrder)
  rnames[nchar(rnames) > 5] <-
    paste0(nchar(names(indivOrder)), "mer")[nchar(rnames) > 5]
  colnames(indivOrderRange) <- rnames
  
  print(indivOrderRange)
  radarchart(
    indivOrderRange,
    title = ape,
    axistype = 1 ,
    maxmin = TRUE,
    
    #custom polygon
    pcol = rgb(0.2, 0.5, 0.5, 0.9) ,
    #pfcol = rainbow(10),
    pfcol = myCol ,
    plwd = 2 ,
    plty = rep(1, nIndividuals),
    
    #custom the grid
    cglcol = "grey",
    cglty = 1,
    axislabcol = "grey",
    cglwd = 1,
    
    #custom labels
    vlcex = 1,
    caxislabels = seq(max, 1, -1)
  ) #design from http://www.r-graph-gallery.com/142-basic-radar-chart/
}

explData<-abundantRepeatsVsIndividuals
Fsp<-paste(lapply(strsplit(colnames(explData)," "), function(x) x[2]))
#colnames(explData)<-Fsp

for (ape in unique(Fsp)) {
  print(ape)
  t<-explData[,grepl(ape,colnames(explData))==TRUE]
  #print(dim(t))
  n<-dim(t)[2]
  if (!is.null(n) && n>1) {
    t<-as.data.frame(t)
    
    #NOTE: SORTED BY BOTH ROWSUMS (repeat abundances, exclude zero count repeats) and COLSUMS (individual abundances)
    t <-t[order(rowSums(t),decreasing = TRUE), , drop = FALSE]
    
    #sort individuals by rank of cummulative abundances
    t <-t[,order(colSums(t),decreasing = TRUE), drop = FALSE]
  
    #pick only 10 most abundant repeats
    t<-head(t,n=10)
    coloring<-rainbow(max(nchar(rownames(t))),start=0)
    palette(coloring)
    trans<-t(t)
    colnames(t)<-make.unique(colnames(t))
    indivSorted<-as.data.frame(apply(t, 1, function(x) paste(names(x)[order(x)])))
    
    allIndivOrderData<-NULL
    
    par(mfrow=c(3,5))
    for (c in colnames(t)) {
      #indivOrder<-sort(apply(indivSorted,2,function(x) which(x==c)))
      indivOrder<-apply(indivSorted,2,function(x) which(x==c))
      drawRadarPlot(as.data.frame(t(as.data.frame(indivOrder))),length(colnames(t)),gsub( " .*$", "", c),rgb(0.2, 0.5, 0.5, 0.2)) 
      allIndivOrderData<-rbind(allIndivOrderData,indivOrder)
    }
    
    rownames(allIndivOrderData)<-colnames(t)
    allIndivOrderData<-as.data.frame(allIndivOrderData)
    drawRadarPlot(allIndivOrderData,nrow(allIndivOrderData),paste("all",ape,"individuals"),rgb(0.2, 0.5, 0.2, 0.05)) 
  }
}

@

<<FIGURE7,eval=FALSE>>=
par(mfrow=c(2,3))
#DIVIDE BY SPECIES
setwd("/Users/polly/Desktop/projects/heterochromatin/phylogeny")

#myList = c("Homo", "Pan_paniscus", "Pan_troglodytes", "Gorilla", "Pongo")
myList = c("Homo","Chimpanzee","Bonobo","Gorilla","Orangutan")

returnCorrelationVector <- function(vector) {
  #identify data for which correlation cannot be calculated
  x <- correlate(vector,method="spearman",diagonal = NA)
  #tolerated <- length(colnames(x)) - 1
  #NAcounts <-
  #  apply(x, 1, function(x)
  #    as.numeric(table(is.na(x))["TRUE"]))
  #keep <- NAcounts < (tolerated)
  
  #keep only data for which correlation CAN be calculated
  #subset <- vector[, keep]
  #x <- correlate(subset)
  x <- shave(x)
  corValues <- as.vector(as.numeric(unlist(x)))
  corValues <- corValues[!is.na(corValues)]
  return(sort(corValues))
}



for (ape in myList) {
  print(ape)
  
  #get most abundant repeats for each species
  corData <- sampleToCluster
  repeat_motifs_to_use<-as.character(unlist(most_abundant_for_each_species[ape]))
  corData<-corData[grepl(ape, rownames(corData)) == TRUE,repeat_motifs_to_use[1:500]] #subsample first n repeats
  print(dim(corData))
  
  source("http://www.sthda.com/upload/rquery_cormat.r")
  #correlation plot
  corTable<-t(corData)
  corTable<-as.matrix(corTable)
  class(corTable) <- "numeric"
  colnames(corTable)<-make.names(colnames(corTable),unique=TRUE)
  rquery.cormat(t(corTable)[,1:500], type="upper",graphType="heatmap")
  
  #get vector of all correlation coefficients that could be calculated
  corValues<-returnCorrelationVector(corData)
  
  #todo: rewrite reshuffling
  permutations<- list()
  for (perm in 1:10){ 
    permutations[[perm]] <-returnCorrelationVector(apply(corData,2,sample))
  }
  
  #permutations<-lapply(permutations,sort)
  #reshuffledData <- apply(corData,2,sample)
  
  df <- data.frame(x =1:length(length(corData)),
                   F = apply(sapply(permutations, unlist),1,median),
                   L = apply(sapply(permutations, unlist),1,min),
                   U = apply(sapply(permutations, unlist),1,max))
  
  #df<-df[with(df, order(F)),] #sort by F column that denotes means
  df$x<-seq(1,length(df$F),1)
  
  plot(df$x, df$F,ylim=c(-1,1),type='l',col="red",main=ape,ylab = "correlation coefficient",cex.axis=1.8,cex.lab=1.8,xlab="repeat motifs")
  
  #make polygon where coordinates start with lower limit and 
  # then upper limit in reverse order
  polygon(c(df$x,rev(df$x)),c(df$L,rev(df$U)),col = "grey75", border = FALSE)
  lines(df$x, df$F, lwd = 2)
  
    points(
    corValues,
    ylab = "correlation coefficient",
    ylim = c(-1, 1),
    pch = 20,
    main = ape,
    xlim = c(0, length(corValues)),
    col = adjustcolor("red", alpha.f = 0.1)
  )
    
    abline(h = 0, col = "red")
  #add red lines on borders of polygon
  #lines(df$x, df$U, col="red",lty=2)
  #lines(df$x, df$L, col="red",lty=2)
}
@

<<sandbox>>=
rownames((keep[keep$Chimpanzee==0 & keep$Bonobo==0 & keep$Gorilla>0 & keep$Orangutan==0 & keep$Homo==0,]))
@

<<identify candidates>>=

#merge by species
#for each species
  #filter out non-density repeats
  #run t-test and assess significance
  #report top 5 significant repeats

#compare how much identifies repeats overlap between species by clustering
library("pwr")
library("gsubfn")
#library(MVR)

getCandidatesForSpecies <- function(colName,species,threshold) {
    transposed<-pca_data[c(colName,"species","sex")]
    transposed<-transposed[grep(species, rownames(transposed)),]
    colnames(transposed)<-c("counts","species","sex")
    transposed<-transform(transposed,counts = as.numeric(counts))
    
    if (mean(transposed$counts)>threshold) {
    
    print(colName)  
    print(paste("mean species level density: ",sum(transposed$counts)))
    toPlotAggregated<-aggregate(counts ~ sex + species, data=transposed, FUN=mean)
    print(toPlotAggregated)
    male_individuals<-as.numeric(table(transposed$sex)["M"])
    female_individuals<-as.numeric(table(transposed$sex)["F"])
    
    means<-mean(transposed[transposed$sex=="M",,drop=FALSE]$counts)-mean(transposed[transposed$sex=="F",,drop=FALSE]$counts)
    ratios<-mean(transposed[transposed$sex=="M",,drop=FALSE]$counts)/mean(transposed[transposed$sex=="F",,drop=FALSE]$counts)
    
    d<-round(as.numeric(means))
    r<-round(as.numeric(ratios),2)
    #power<-pwr.t2n.test(male_individuals,female_individuals,abs(d),alternative="less")$power
    #effect size needs to be calculated as absolute difference in means divided by the pooled std
    
    pvalue<-NaN
    #we can only run statistical test if we have positive number of male and female samples
    if (sum(transposed$sex=="M")>0 & sum(transposed$sex=="F")>0) {
      pvalue<-wilcox.test(alternative="less",transposed[transposed$sex=="F",,drop=FALSE]$counts,transposed[transposed$sex=="M",,drop=FALSE]$counts)$p.value 
      pvalue<-round(as.numeric(pvalue),2)
      }
    if (pvalue<=0.2) {
      return(c(colName,pvalue,round(mean(transposed$counts)),r,d))
      }
    }
}

getTopCandidatesForSpecies <- function(species,threshold) {
  repeats_to_iterate_over<-colnames(pca_data)[1:(ncol(pca_data)-2),drop=FALSE]
  pvalues<-lapply(repeats_to_iterate_over,getCandidatesForSpecies,species=species,threshold=threshold)
  candidates<-as.data.frame(do.call(rbind,pvalues))
  colnames(candidates)<-c("unit","pvalue","avg_density","ratio","difference")
  candidates<-candidates[order(as.numeric(as.character(candidates$avg_density)),decreasing=TRUE) , ,drop=FALSE]
  return(candidates)
}

threshold<-50000 #minimum density for a repeat to be considered
#1,000,000 reads translate into 100,000,000 bp, thus 0.0005 (0.05%) repeat will cover 50,000 bps
Candidates_Chimpanzee<-getTopCandidatesForSpecies("Chimpanzee",threshold)
Candidates_Bonobo<-getTopCandidatesForSpecies("Bonobo",threshold)
Candidates_Gorilla<-getTopCandidatesForSpecies("Gorilla",threshold)
Candidates_Orangutan<-getTopCandidatesForSpecies("Orangutan",threshold)
Candidates_Human<-getTopCandidatesForSpecies("Homo",threshold)


print(Candidates_Chimpanzee)
print(Candidates_Bonobo)
print(Candidates_Gorilla)
print(Candidates_Orangutan)
print(Candidates_Human)

top_candidates_uniq<-unique(c(as.vector(Candidates_Chimpanzee$unit),as.vector(Candidates_Bonobo$unit),as.vector(Candidates_Gorilla$unit),as.vector(Candidates_Orangutan$unit)))
#print(top_candidates_uniq)
@

<<male-biased candidates, their abundance and frequency>>=
match(as.character(unlist(most_abundant_for_each_species["Chimpanzee"])),Candidates_Chimpanzee$unit)
match(as.character(unlist(most_abundant_for_each_species["Bonobo"])),Candidates_Bonobo$unit)
match(as.character(unlist(most_abundant_for_each_species["Gorilla"])),Candidates_Gorilla$unit)
match(as.character(unlist(most_abundant_for_each_species["Orangutan"])),Candidates_Orangutan$unit)

print(binary[Candidates_Chimpanzee$unit,])
print(binary[Candidates_Bonobo$unit,])
print(binary[Candidates_Gorilla$unit,])
print(binary[Candidates_Orangutan$unit,])
@


<<FIGURE6 violin plots>>=
library(vioplot)
par(mfrow=c(1,2),cex=1.3)

plotViolin <- function(repeatName) {
  colName<-repeatName
  
  getMales <- function(colName,species) {
    transposed<-pca_data[c(colName,"species","sex")]
    transposed<-transposed[grep(species, rownames(transposed)),]
    colnames(transposed)<-c("counts","species","sex")
    transposed<-transform(transposed,counts = as.numeric(counts))
    return(transposed[transposed$sex=="M",,drop=FALSE]$counts)
  }
  
  getFemales <- function(colName,species) {
    transposed<-pca_data[c(colName,"species","sex")]
    transposed<-transposed[grep(species, rownames(transposed)),]
    colnames(transposed)<-c("counts","species","sex")
    transposed<-transform(transposed,counts = as.numeric(counts))
    return(transposed[transposed$sex=="F",,drop=FALSE]$counts)
  }
  
  my.vioplot(getFemales(colName,"Homo"),getMales(colName,"Homo"),getFemales(colName,"Chimpanzee"),getMales(colName,"Chimpanzee"),getFemales(colName,"Bonobo"),getMales(colName,"Bonobo"),getFemales(colName,"Gorilla"),getMales(colName,"Gorilla"),getFemales(colName,"Orangutan"),getMales(colName,"Orangutan"),col=c("tomato","skyblue","tomato","skyblue","tomato","skyblue","tomato","skyblue","tomato","skyblue"),names=c("Homo","Homo","Chimpanzee","Chimpanzee","Bonobo","Bonobo","Gorilla","Gorilla","Orangutan","Orangutan"))
  
  tHomo<-wilcox.test(alternative="less",getFemales(colName,"Homo"),getMales(colName,"Homo"))
  tChimpanzee<-wilcox.test(alternative="less",getFemales(colName,"Chimpanzee"),getMales(colName,"Chimpanzee"))
  tBonobo<-wilcox.test(alternative="less",getFemales(colName,"Bonobo"),getMales(colName,"Bonobo"))
  tGorilla<-wilcox.test(alternative="less",getFemales(colName,"Gorilla"),getMales(colName,"Gorilla"))
  tOrangutan<-wilcox.test(alternative="less",getFemales(colName,"Orangutan"),getMales(colName,"Orangutan"))
  
  mtext(as.character(round(tHomo$p.value,2)),col=ifelse(tHomo$p.value<=0.05,"red","black"),at=2)
  mtext(as.character(round(tChimpanzee$p.value,2)),col=ifelse(tChimpanzee$p.value<=0.05,"red","black"),at=4)
  mtext(as.character(round(tBonobo$p.value,2)),col=ifelse(tBonobo$p.value<=0.05,"red","black"),at=6)
  mtext(as.character(round(tGorilla$p.value,2)),col=ifelse(tGorilla$p.value<=0.05,"red","black"),at=8)
  mtext(as.character(round(tOrangutan$p.value,2)),col=ifelse(tOrangutan$p.value<=0.05,"red","black"),at=10)
}

plotViolin("AATGG") 
text(1,getFemales(colName,"Homo"),labels=".",cex=3) #add single value for human females to the plot

plotViolin("AAACATGGAAATATCTACACCGCTATCTGTAT")
@


<<controls>>=

density_by_sample<-as.data.frame(colSums(density))
density_by_sample$Run<-gsub("\\_.*","",rownames(density_by_sample))
colnames(density_by_sample)<-c("density","Run")

density_vs_count<-merge(density_by_sample,rc_by_sample)
plot(density_vs_count$rCount,density_vs_count$density,main ="Number of reads in a sample is independent of the repeat density in a sample",xlab="number of reads",ylab="repeat density",cex=2)
cor(density_vs_count$rCount,density_vs_count$density,method="spearman")

@

