\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<#nanopore repeats>>=

original_order<-c("AATGGAGTGGAGTGG","AATGGAATGGAGTGG","AATGGAGTGG","ACTCC","AAAG","AATGG","AATCGAATGGAATGG","AATCATCATCGAATGGAATCGAATGG","AATCATCGAATGGAATCGAATGG","AAATGGAATCGAATGGAATCATC","AAACATGGAAATATCTACACCGCTATCTGTAT","AAACATGGAAATATCTACACCGCCATCTGTAT","AAACATGGAAATATCTACACTGCCATCTGTAT","AAACATGGAAATATCTACACCGCGATCTGTAT","AAACATGGAAATATCTACACAGCCATCTGTAT","AAACATGGAAATATCTACACCGCTATCTCTAT","AAACATGGAAATATCTACACCACCATCTGTAT","AAACATGGAAATATCTACACCACTATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTGT","AAACATGGAAATATCTACACTGCTATCTGTAT","AAACATGGAAATATCTACACCGCCATCTCTAT","AAATATCTACACCGCTATCTGTATGAACATGG","AAATATCTACACCGCCATCTGTATGAACATGG","AAATGGAATCGAATGGAATCATCATC","AATCATCGAATGGACTCGAATGG","AAATGGACTCGAATGGAATCATC","AAACATGTAAATATTTACACAGAATCTGTAT","AAGTGGAATGG","AAATATCTACACAGCTATCTGTATGAACATGG","AAATATCTACACCACTATCTGTATGAACATGG","AAATATCTACACCGCTATCTGCATGAACATGG","AATCATCATGAATGGAATCGAATGG","AATGGAATGTGG","AAATGGAATCGAATGTAATCATCATC","AATGGAATGGAATGGAATGTGG","AATGGAATGGAATGTGG","AACGTGGAATGG","AATGGAATGTG","AAAGTGGAATGG")

repeat_order<-c("AATGG","ACTCC","AAAG","AATGGAGTGG","AATGGAATGGAGTGG","AATGGAGTGGAGTGG","AAGTGGAATGG","AATGGAATGTG","AAAGTGGAATGG","AACGTGGAATGG","AATGGAATGTGG","AATGGAATGGAATGTGG","AATGGAATGGAATGGAATGTGG","AAATGGACTCGAATGGAATCATC","AATCGAATGGAATGG","AAATGGAATCGAATGGAATCATC","AATCATCGAATGGAATCGAATGG","AATCATCGAATGGACTCGAATGG","AATCATCATGAATGGAATCGAATGG","AAATGGAATCGAATGGAATCATCATC","AAATGGAATCGAATGTAATCATCATC","AATCATCATCGAATGGAATCGAATGG","AAACATGTAAATATTTACACAGAATCTGTAT","AAATATCTACACCGCTATCTGTATGAACATGG","AAATATCTACACCGCCATCTGTATGAACATGG","AAACATGGAAATATCTACACAGCCATCTGTAT","AAACATGGAAATATCTACACCACCATCTGTAT","AAACATGGAAATATCTACACCACTATCTGTAT","AAACATGGAAATATCTACACCGCCATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTGT","AAACATGGAAATATCTACACTGCCATCTGTAT","AAACATGGAAATATCTACACTGCTATCTGTAT","AAACATGGAAATATCTACACCGCGATCTGTAT","AAACATGGAAATATCTACACCGCCATCTCTAT","AAACATGGAAATATCTACACCGCTATCTCTAT","AAATATCTACACAGCTATCTGTATGAACATGG","AAATATCTACACCACTATCTGTATGAACATGG","AAATATCTACACCGCTATCTGCATGAACATGG")

#setwd("/Users/polly/Desktop/projects/heterochromatin/nanopore/run_March20_2018/barcoded")
#setwd("/Users/polly/Desktop/projects/heterochromatin/nanopore/run_April26_2018/barcoded")
setwd("/Users/polly/Desktop/projects/heterochromatin/long_read/nanopore/filtered")
#setwd("/Users/polly/Desktop/projects/heterochromatin/long_read/nanopore/unfiltered")
#setwd("/Users/polly/Desktop/projects/heterochromatin/long_read/pacbio/filtered")
#setwd("/Users/polly/Desktop/projects/heterochromatin/long_read/pacbio/unfiltered")

#directories<-c("barcode07","barcode12","barcode10","barcode08","barcode11","barcode09")
directories<-c("barcode05","barcode03","barcode06","barcode02","barcode04","barcode01")
#directories<-c("barcode05","barcode03","barcode02","barcode04")

for(directory in directories){
  filenames <- list.files(path=directory,pattern=".*stats")
  print(filenames)
  ###Load all files
  for(filepath in filenames){
      name<-gsub(".stats","",filepath)
      print(name) #name of data frame
      assign(name, read.delim(paste0(directory,"/",filepath),header=TRUE,sep = "\t"))
  }
}

plotOneRepeat <-function(dat,list_of_names,i) {
  dat <- lapply(dat, function(x) cbind(x = seq_along(x), y = x))
  list.names <- gsub(".fasta","",gsub("barcode","",list_of_names))
  
  #replace barcodes for the species names
  #list.names<- gsub("07","Human",list.names)
  #list.names<- gsub("08","Gorilla",list.names)
  #list.names<- gsub("09","Borang",list.names)
  #list.names<- gsub("10","Bonobo",list.names)
  #list.names<- gsub("11","Sorang",list.names)
  #list.names<- gsub("12","Chimp",list.names)
  
  list.names<- gsub("05","Human",list.names)
  list.names<- gsub("02","Gorilla",list.names)
  list.names<- gsub("01","Borang",list.names)
  list.names<- gsub("06","Bonobo",list.names)
  list.names<- gsub("04","Sorang",list.names)
  list.names<- gsub("03","Chimp",list.names)
  
  lns <- sapply(dat, nrow)
  dat <- as.data.frame(do.call("rbind", dat))
  dat$group <- rep(list.names, lns)
  dat$group <- factor(dat$group,levels = list.names,ordered = TRUE)
  
  myColors <- c("black","blue","darkgreen","red","orange","gold")
  names(myColors) <- levels(dat$group)
  colScale <- scale_colour_manual(name = "group",values = myColors)
  
  theme_set(theme_gray(base_size = 18))
  pvar<-ggplot(dat, aes(x=group, y=y, color=factor(group))) + 
        geom_boxplot(show.legend=F,lwd=1.5) + 
        #geom_dotplot(binaxis='y', stackdir='center', dotsize=0.01) +
        ggtitle(paste0("",i)) +
        xlab("Species") + ylab("length of repeat array") +
        theme(axis.text.x=element_blank(),plot.title = element_text(size=16)) + 
        colScale
  
  return(pvar)
}

#read_counts<-c(2941,2970,3513,4000,4427,2839)
read_counts<-c(1000,1000,1000,1000,1000,1000)

library(ggplot2)
library(gridExtra)
library(Rmisc)
library(RColorBrewer)

speciesType <- function(type) {
 switch(type,
        "1" = "Borang",
        "2" = "Gorilla",
        "3" = "Chimp",
        "4" = "Sorang",
        "5" = "Human",
        "6" = "Bonobo"
        )
}

@

<<>>=
#plot by species
par(mfrow=c(2,1))
p <- list()
medians_df<-NULL

for (sp in c(1,2,3,4,5,6)) {
  print(paste("species",speciesType(sp)))
  rep_names<-paste0("barcode0",sp,".fasta.rep",seq(from=0,to=39,by=1))
  
  rep_data<-lapply(rep_names, function(x) as.vector(get(x)[["querybp"]]))
  repeat_types<-lapply(rep_names, function(x) as.vector(get(x)[["motif"]]))
  
  for (i in seq(from=0,to=length(repeat_types),by=1)) {
    normalized<-unlist(repeat_types[i])
    if (length(normalized)>0) {
      repeat_types[i]<-list(normalized)
    } else {
      repeat_types[i]<-NA
    }
  }
  
  motif<-unlist(lapply(repeat_types,unique))
  #print(motif)
  
  for (rep in seq(from=0,to=39,by=1)) {
    normalized<-unlist(rep_data[rep])
    if (length(normalized)>0) {
      rep_data[rep]<-list(normalized)
    } else {
      rep_data[rep]<-NA
    }
  }
  #print(rep_data) #
  rep_data<-lapply(rep_data, `length<-`, max(lengths(rep_data)))
  longest<-max(c(log(unlist(rep_data[2:length(rep_data)])),12),na.rm=TRUE)
  reordered_repCol<-c(1,1+match(repeat_order,original_order))
  boxplot(lapply(rep_data[reordered_repCol],log),col=rainbow(length(repeat_types)),ylim=c(0,longest),names=paste0("(",0:39,") ",motif[reordered_repCol]),las=2,main=speciesType(sp),outline=TRUE,yaxt='n')
  medians<-unlist(lapply(rep_data,function(x) {median(x,na.rm=TRUE)}))
  medians_df<-rbind(medians_df,medians)
  
  tickp<-c(500,5000,50000)
  lab.y <- tickp
  at.y <- log(tickp)
  axis(2, at=at.y, labels=lab.y, las=1)
  
  plot.new()
  
  #print("mean")
  #print(sort(as.numeric(lapply(rep_data[2:40],function(x) {mean(x,na.rm=TRUE)})))) #MEAN LENGTH for each repeated motif in a species
  print("median")
  print(sort(as.numeric(lapply(rep_data[2:40],function(x) {median(x,na.rm=TRUE)})))) #MEDIAN LENGTH for each repeated motif in a species
  
  sample_size<-as.numeric(lapply(rep_data,function(x) {table(!is.na(x))["TRUE"]}))
  print(tail(sort(unlist(lapply(rep_data,function(x) {max(x,na.rm=TRUE)}))),n=2))
  #print(sort(sample_size/sample_size[1]*10000)) #NUMBER OF LOCI PER 10,000 READS
}

@

<<>>=
#REWRITE TO WORK WITH PACBIO DATA

#pacbio
#rownames(medians_df)[1]<-speciesType(2)
#rownames(medians_df)[2]<-speciesType(3)
#rownames(medians_df)[3]<-speciesType(4)
#rownames(medians_df)[4]<-speciesType(5)

#nanopore
for (sp in c(1,2,3,4,5,6)) { 
rownames(medians_df)[sp]<-speciesType(sp)
}

colnames(medians_df)<-motif #proper colnames
medians_df<-as.data.frame(medians_df)

species_order_nanopore<-c("Human","Chimp","Bonobo","Gorilla","Sorang","Borang")
species_order_pacbio<-c("Human","Chimp","Gorilla","Sorang")

medians_df<-medians_df[species_order_nanopore,2:40] #REORDER SPECIES ORDER, remove read-lenth column
#medians_df<-medians_df[species_order_pacbio,2:40] #REORDER SPECIES ORDER, remove read-lenth column
@

<<>>=
par(mfrow=c(2,1))
plot(1, type="n", xlab="", xlim=c(0, 40), ylim=c(0, 300),xaxt='n',ylab="median length of a repeat array")

medians_df_to_plot<-medians_df[,match(repeat_order,original_order)] #REORDER COLUMNS to match correct repeat order

myColors_nanopore <- c("black","blue","darkgreen","red","orange","gold")
myColors_pacbio <- c("black","blue","red","orange")

for (sp in c(1,2,3,4,5,6)) { 
  rownames(medians_df_to_plot)[sp]
  points(1:39,medians_df_to_plot[sp,1:39],col=rainbow(length(repeat_types)),las=2,main=speciesType(sp),pch=19,xaxt='n')
  lines(1:39,medians_df_to_plot[sp,1:39],col=myColors_nanopore[sp],las=2,main=speciesType(sp),pch=19,lw=3,xaxt='n')
  Sys.sleep(0.5)
}
axis(1, at=1:39, labels=paste0("(",1:39,") ",repeat_order), las=2)

legend(5,300, legend=gsub("Chimp","Chimpanzee",gsub("Sorang","Sumatran orangutan",species_order_nanopore)),col=myColors_nanopore, lty=1, lw=3, bty='n',cex=1)
#legend(5,300, legend=gsub("Chimp","Chimpanzee",gsub("Sorang","Sumatran orangutan",species_order_pacbio)),col=myColors_pacbio, lty=1, lw=3, bty='n',cex=1)
@


<<>>=
#plot by satellite
p <- list()
for (i in 1:39) {
  rep_names<-c(paste0("barcode05.fasta.rep",i),paste0("barcode03.fasta.rep",i),paste0("barcode06.fasta.rep",i),paste0("barcode02.fasta.rep",i),paste0("barcode04.fasta.rep",i),paste0("barcode01.fasta.rep",i))
  
  rep_data<-lapply(rep_names, function(x) as.vector(get(x)[["querybp"]]))
  motif<-unique(unlist(lapply(rep_names, function(x) as.vector(get(x)[["motif"]]))))
  print(motif)
  
  for (sp in 1:6) {
    normalized<-unlist(rep_data[sp])/read_counts[sp]*1000
    if (length(normalized)>0) {
      rep_data[sp]<-list(normalized)
    } else {
      rep_data[sp]<-NA
    }
  }
  print(rep_data)
  rep_data<-lapply(rep_data, `length<-`, max(lengths(rep_data)))
  p[[i]] <- plotOneRepeat(rep_data,rep_names,motif)
}
multiplot(plotlist = p[c(6,7,29)], layout=matrix(seq(1,3,1), nrow=1, byrow=TRUE))
#multiplot(plotlist = p[c(11,29)], layout=matrix(seq(1,2,1), nrow=1, byrow=TRUE))

#multiplot(plotlist = p[1:9], layout=matrix(seq(1,9,1), nrow=3, byrow=TRUE))
#multiplot(plotlist = p[10:18], layout=matrix(seq(1,9,1), nrow=3, byrow=TRUE))
#multiplot(plotlist = p[19:27], layout=matrix(seq(1,9,1), nrow=3, byrow=TRUE))
#multiplot(plotlist = p[28:36], layout=matrix(seq(1,9,1), nrow=3, byrow=TRUE))
#multiplot(plotlist = p[37:39], layout=matrix(seq(1,9,1), nrow=3, byrow=TRUE))

@


<<How far are satellite arrays from the read extremity>>=
starts<-scan(file="/Users/polly/Desktop/projects/heterochromatin/nanopore/repeat.starts")
ends<-scan(file="/Users/polly/Desktop/projects/heterochromatin/nanopore/repeat.ends")
par(mfrow=c(2,1))
hist(starts)
hist(ends)
quantile(starts,probs = seq(0, 1, 0.05))
quantile(ends,probs = seq(0, 1, 0.05))

table(starts<32)/length(starts)*100
table(ends<32)/length(ends)*100
@

<<>>=
tmp<-read.table("/Users/polly/Desktop/projects/heterochromatin/nanopore/secondary_structure/Human05.fasta.rep38.stats",header=TRUE,comment.char="")

#aggregate on read id and create cummulative querybp
summed_over_read<-setNames(aggregate(d$querybp, by=list(Category=d$seq), FUN=sum), c("seq", "cummulative_querybp"))
d<-merge(tmp,summed_over_read)
@

<<>>=
par(mfrow=c(3,5))
files <- list.files(path="/Users/polly/Desktop/projects/heterochromatin/nanopore/secondary_structure/", pattern="*.stats", full.names=TRUE, recursive=FALSE)
lapply(files, function(x) {
  print(x)
  t <- read.table(x, header=TRUE,comment.char="") # load file
  if (nrow(t)>0) {
    mtf<-unique(sort(t$motif))
    gcseq<-as.vector(unlist(strsplit(as.character(mtf), split="")))
    gcvalue<-round(GC(gcseq),2)
    print(table(gcseq))
    plot(t$strand, t$querybp,main=unique(sort(t$motif)),sub=paste("GC:",1-gcvalue,gcvalue),ylab="querybp",xlab="strand") #dramatic difference in querybp based on te strand 
  }
})
@


<<>>=

plot(d$strand, d$querybp) #dramatic difference in querybp based on te strand

distanceToEndOfRead <- function(row){ #TODO: FIX FOR MULTIPLE REPEATS WITHIN SINGLE READ
return(min(row$start,(row$seqLen-row$end)))
}

edgeDistance<-sapply(1:566,function(x) {distanceToEndOfRead(d[x,])})
plot(d$querybp,edgeDistance,col=ifelse(abs(2864-d$querybp)<50, "red", "black"))

heatcols <- brewer.pal(9, 'YlOrRd') #
edgeDistanceColor<-as.numeric(cut(edgeDistance,breaks=5))
queryLengthColor<-as.numeric(cut(d$querybp,breaks=5))

plot(d$seqLen,d$querybp/d$seqLen,pch=as.numeric(d$strand)+14,col=heatcols[edgeDistanceColor+4],cex=0.75,ylab="proportion",xlab="read length")

plot(d$querybp,d$querybp/d$seqLen,xlab="querybp",ylab="proportion")
plot(d$cummulative_querybp,d$querybp/d$seqLen,xlab="cummulative_querybp",ylab="proportion")

plot(d$cummulative_querybp,d$seqLen,xlab="cummulative_querybp",ylab="read length",col=heatcols[edgeDistanceColor+4])
lines(x = c(0,40000), y = c(0,40000))

plot(sort(d$querybp),1:nrow(d),xlim=c(0,5000))
abline(v=2864,col="red")
abline(v=3584,col="red")
hist(d$querybp,breaks=188)
abline(v=2864,col="red")
abline(v=3584,col="red")
@

\end{document}