<<LOAD LIBRARIES NEEDED and LOAD DATA>>=
require(dendextend)
require(reshape)
require(hexbin)
require(gplots)
require(ggplot2)
require(e1071)
require(rgl)
require(ggfortify)
require(dendextend)
require(fmsb)
require(grDevices)
require(lattice)
require(randomcoloR)
require(corrr)
require(robustbase)
require(ICC)
require(VennDiagram)
require(corrplot)
library(VennDiagram)
source("http://www.sthda.com/upload/rquery_cormat.r")

options(warn=2, error=NULL)
@

<<SET WORKING DIRECTORY>>=
working_directory<-"/Users/polly/Desktop/projects/heterochromatin/refactored/"
setwd(working_directory)
@

<<DATA FORMATTING>>=
top<-density

if (length(filtered_files)==length(colnames(top))) {
  colnames(top)<-paste(lapply(strsplit(filtered_files,"\\|"), function(x) paste(x[3],x[2],x[4])))
} else {
  stop("Data import problem.")
}

medianWithoutNA<-function(x) {
   median(x[which(!is.na(x))])
}

#USE MEDIAN OF ALL TECHNICAL REPLICATES
unique_col_names <- unique(colnames(top))
abundantRepeatsVsIndividuals <- sapply(unique_col_names, function(name)
{
  subs <- top[, colnames(top) == name]
  if(is.data.frame(subs))
    apply(subs,1,medianWithoutNA)
  else
    subs
})

#abundantRepeatsVsIndividuals contains REPEATS as ROWS and INDIVIDUALS with full names as columns
abundantIndividualsVsRepeats<-t(abundantRepeatsVsIndividuals)

#abundantSpeciesVsRepeats contains SPECIES as ROWS and REPEATS as columns
abundantSpeciesVsRepeats<-t(abundantRepeatsVsIndividuals)
l<-rownames(abundantSpeciesVsRepeats)
l[grepl("Pan_paniscus",l)==TRUE]<-"Bonobo"
l[grepl("Pan",l)==TRUE]<-"Chimpanzee"
l[grepl("Gorilla",l)==TRUE]<-"Gorilla"
l[grepl("abelii",l)==TRUE]<-"Sumatran"
l[grepl("pygmaeus",l)==TRUE]<-"Bornean"
l[grepl("Homo",l)==TRUE]<-"Homo"
groupCodes <-l
rownames(abundantSpeciesVsRepeats)<-groupCodes

#abundantSpeciesVsRepeats contains (SUB)SPECIES as ROWS and REPEATS as columns
abundantSubSpeciesVsRepeats<-t(abundantRepeatsVsIndividuals)
l<-rownames(abundantSubSpeciesVsRepeats)
l<-sapply(strsplit(l,"\\ "), function(x) paste(x[2]))
groupCodes <-l
rownames(abundantSubSpeciesVsRepeats)<-groupCodes

print(table(rownames(abundantSpeciesVsRepeats)))
@


<<Figure S1>>=
#calculate intraclass variation; how tight are the technical replicates?
require("ICC")
require("tidyr")
top_long<-as.data.frame(t(head(top,n=100)))
top_long$individual<-rownames(top_long)
top_long <- gather(top_long, repeated_motif, density, AATGG:AAATATCTACACCGCCATCTGTATTAACATGG, factor_key=TRUE)

ICC_for_motif <- function(motif){
    ICCbare(x = individual, y = density, data = filter(top_long,repeated_motif==motif))
}  
ICC_values<-lapply(unique(top_long$repeated_motif),ICC_for_motif)

print(median(unlist(ICC_values),na.rm=TRUE)) #INTRACLASS VARIATION

boxplot(unlist(ICC_values),na.rm=TRUE,outline=FALSE,col="gold",main="The Intraclass Correlation Coefficient",sub=paste("First",length(unique(top_long$repeated_motif)),"repeated motifs"),cex.lab=2,cex.axis=2,cex.main=2)


@


<<FIGURE1>>=
par(cex=0.5)
par(mar=c(10,4,4,2))

repeat_order<-c("AATGG","ACTCC","AAAG","AATGGAGTGG","AATGGAATGGAGTGG","AATGGAGTGGAGTGG","AAGTGGAATGG","AATGGAATGTG","AAAGTGGAATGG","AACGTGGAATGG","AATGGAATGTGG","AATGGAATGGAATGTGG","AATGGAATGGAATGGAATGTGG","AAATGGACTCGAATGGAATCATC","AATCGAATGGAATGG","AAATGGAATCGAATGGAATCATC","AATCATCGAATGGAATCGAATGG","AATCATCGAATGGACTCGAATGG","AATCATCATGAATGGAATCGAATGG","AAATGGAATCGAATGGAATCATCATC","AAATGGAATCGAATGTAATCATCATC","AATCATCATCGAATGGAATCGAATGG","AAACATGTAAATATTTACACAGAATCTGTAT","AAATATCTACACCGCTATCTGTATGAACATGG","AAATATCTACACCGCCATCTGTATGAACATGG","AAACATGGAAATATCTACACAGCCATCTGTAT","AAACATGGAAATATCTACACCACCATCTGTAT","AAACATGGAAATATCTACACCACTATCTGTAT","AAACATGGAAATATCTACACCGCCATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTGT","AAACATGGAAATATCTACACTGCCATCTGTAT","AAACATGGAAATATCTACACTGCTATCTGTAT","AAACATGGAAATATCTACACCGCGATCTGTAT","AAACATGGAAATATCTACACCGCCATCTCTAT","AAACATGGAAATATCTACACCGCTATCTCTAT","AAATATCTACACAGCTATCTGTATGAACATGG","AAATATCTACACCACTATCTGTATGAACATGG","AAATATCTACACCGCTATCTGCATGAACATGG")

#use the information from all (or subset of) individuals to calculate the proportion of individuals that carry a given repeat
createBinary <- function(abundantSpeciesVsRepeats,unique_species,sample_size,Nsampled=FALSE) {
  stopifnot(sum(sample_size)==length(rownames(abundantSpeciesVsRepeats))) #initial control before subsampling takes place
  stopifnot(exists("abundantSpeciesVsRepeats"))
  stopifnot(exists("unique_species"))
  stopifnot(exists("sample_size"))
  stopifnot(exists("Nsampled"))
  
  print(paste("unique species:",unique_species))
  print(paste("sample size:",sample_size))
  print(paste("is subsampling turned on?",Nsampled)) #Nsampled is either FALSE or a number of individuals per species
  
  if (Nsampled!=FALSE) {
      sample_size<-rep(Nsampled,length(unique_species)) #sample size subsampled
  } 
  
  print(paste("sample size:",sample_size))
  
  tmp<-abundantSpeciesVsRepeats
  tmp[tmp>0]<-1
  tmp<-as.data.frame(tmp)
  print(dim(tmp))
  
  tmp_transformed <- sapply(unique_species, function(name) {
    subs <- tmp[rownames(tmp) == name,]
    print(dim(subs))
    
    if (Nsampled!=FALSE) {
      subs <- subs[sample(seq(1:nrow(subs)),Nsampled,replace=FALSE),] 
    } 
    
    print(dim(subs))
    if(is.data.frame(subs))
      colSums(subs,na.rm = TRUE)
    else
      subs
  })
  
  stopifnot(ncol(tmp_transformed)==length(unique_species))
  stopifnot(exists("tmp_transformed"))
  stopifnot(exists("sample_size"))
  
  print(paste("sample size:",sample_size))
  tmp_transformed_sweeped<-sweep(tmp_transformed, 2, sample_size, `/`)
  print(warnings())
  return(tmp_transformed_sweeped)
}

sample_size<-c(9,19,13,27,5,5)

#Figure S7
#the binary can be run with the full sample sizes, or just a subset 
#the variable will contain values from <0,1> interval (0: not present in a species, 1: present in all individuals of a species)
unique_species<-c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")
binary<-createBinary(abundantSpeciesVsRepeats,unique_species,c(9,19,13,27,5,5),FALSE) #sample sizes for "Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean"

returnSpeciesSpecificCounts <- function(binary_set) {
  print(colnames(binary_set))
  #specific to human
  human_specific<<-length(rownames((binary_set[binary_set$Homo>0 & binary_set$Chimpanzee==0 & binary_set$Bonobo==0 & binary_set$Gorilla==0 & binary_set$Sumatran==0 & binary_set$Bornean==0,])))
  #specific to chimpanzee
  chimpanzee_specific<<-length(rownames((binary_set[binary_set$Homo==0 & binary_set$Chimpanzee>0 & binary_set$Bonobo==0 & binary_set$Gorilla==0 & binary_set$Sumatran==0 & binary_set$Bornean==0,])))
  #specific to bonobo
  bonobo_specific<<-length(rownames((binary_set[binary_set$Homo==0 & binary_set$Chimpanzee==0 & binary_set$Bonobo>0 & binary_set$Gorilla==0 & binary_set$Sumatran==0 & binary_set$Bornean==0,])))
  #specific to gorilla
  gorilla_specific<<-length(rownames((binary_set[binary_set$Homo==0 & binary_set$Chimpanzee==0 & binary_set$Bonobo==0 & binary_set$Gorilla>0 & binary_set$Sumatran==0 & binary_set$Bornean==0,])))
  #specific to Sumatran
  Sumatran_specific<<-length(rownames((binary_set[binary_set$Homo==0 & binary_set$Chimpanzee==0 & binary_set$Bonobo==0 & binary_set$Gorilla==0 & binary_set$Sumatran>0 & binary_set$Bornean==0,])))
  #specific to Bornean
  Bornean_specific<<-length(rownames((binary_set[binary_set$Homo==0 & binary_set$Chimpanzee==0 & binary_set$Bonobo==0 & binary_set$Gorilla==0 & binary_set$Sumatran==0 & binary_set$Bornean>0,])))
  species_specific<<-c(human_specific,chimpanzee_specific,bonobo_specific,gorilla_specific,Sumatran_specific,Bornean_specific)
  return(species_specific)
}

#get indices of the most abundant repeated motifs
indicesOfAbundantRepeats<-match(repeat_order,rownames(binary))

mycol<-colorRampPalette(c("white","#a31527" ), bias=1)(n=1000) 

#ALL REPEATED MOTIFS (not shown)
heatmap.2(binary[,c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")],dendrogram="none", Colv=FALSE, trace='none',col=mycol,cexRow=0.1,cexCol=0.75,key.title=NA,main="all")
print(dim(binary[,c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")]))

#EXCLUDE 39 ABUNDANT MOTIFS (Figure S7A)
heatmap.2(binary[-indicesOfAbundantRepeats,c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")],dendrogram="none", Colv=FALSE, trace='none',col=mycol,cexRow=0.1,cexCol=0.75,key.title=NA,main="abundant excluded")
print(dim(binary[-indicesOfAbundantRepeats,c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")]))

#ONLY ABUNDANT MOTIFS (Figure S7H)
heatmap.2(binary[repeat_order,c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")],dendrogram="none", Colv=FALSE, Rowv = FALSE, trace='none',col=mycol,cexRow=0.1,cexCol=0.75,key.title=NA,main="abundant only")

binary<-as.data.frame(binary)

#phylogeny of (non-) 32-mers
binary_32mer<-binary[(nchar(rownames(binary))==32) | (nchar(rownames(binary))==31),]
binary_non32mer<-binary[nchar(rownames(binary))!=32 & nchar(rownames(binary))!=31,]

dim(binary_32mer[binary_32mer$Homo>0 & binary_32mer$Chimpanzee>0 & binary_32mer$Bonobo>0 & binary_32mer$Gorilla>0 & binary_32mer$Sumatran>0 & binary_32mer$Bornean>0,])
dim(binary_non32mer[binary_non32mer$Homo>0 & binary_non32mer$Chimpanzee>0 & binary_non32mer$Bonobo>0 & binary_non32mer$Gorilla>0 & binary_non32mer$Sumatran>0 & binary_non32mer$Bornean>0,])

#repeated motifs that are shared among all species
dim(binary[binary$Homo>0 & binary$Chimpanzee>0 & binary$Bonobo>0 & binary$Gorilla>0 & binary$Sumatran>0 & binary$Bornean>0,])
table(sort(nchar(rownames((binary[binary$Homo>0 & binary$Chimpanzee>0 & binary$Bonobo>0 & binary$Gorilla>0 & binary$Sumatran>0 & binary$Bornean>0,])))))


#calculation of the species-specific repeated motifs
print(returnSpeciesSpecificCounts(binary)) #including the most abundant repeated motifs
print(returnSpeciesSpecificCounts(binary[-indicesOfAbundantRepeats,])) #excluding the most abundant repeated motifs

print(table(rowSums(binary==1)))

print(apply(binary[repeat_order,],2,function(x) {table((x==1))})) #repeat present in all individuals of a species
print(apply(binary[repeat_order,],2,function(x) {table((x==1) | (x>0))})) #repeat present in a species

present_length<-sapply(1:ncol(binary), function(x) {table(binary[repeat_order,x]>0)["TRUE"]})
print(apply(binary[repeat_order,],2,function(x) {table((x==1))})[2,]/present_length*100)

present_length<-sapply(1:ncol(binary), function(x) {table(binary[-indicesOfAbundantRepeats,x]>0)["TRUE"]})
print(apply(binary[-indicesOfAbundantRepeats,],2,function(x) {table((x==1))})[2,]/present_length*100)


#proportion of repeated motifs that is not present in all individuals of a given species / present only in subset of the individuals
print(100-apply(binary,2,function(x) {table((x==1) | (x==0))})[2,]/nrow(binary)*100)
#same, but with the exclusion of the most abundant repeats
print(100-apply(binary[-indicesOfAbundantRepeats,],2,function(x) {table((x==1) | (x==0))})[2,]/nrow(binary[-indicesOfAbundantRepeats,])*100)

@

<<FIGURES 1B and S3>>=
par(mfrow=c(1,1),cex=1,cex.axis=1,cex.lab=1)
myList<-c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")

most_abundant_for_each_species<-NULL
nrepeats_subset<-50

for (ape in myList) {
  print(ape)
  subset<-abundantSpeciesVsRepeats[grepl(ape,rownames(abundantSpeciesVsRepeats))==TRUE,]
  print(dim(subset))
  reordered<-subset[,order(colMeans(-subset,na.rm=TRUE))]
  print(binary[colnames(reordered)[1:nrepeats_subset],])
  
  #use this code if you want to replace long labels with unit length sizes, e.g. specific sequenceas "42-mer" 
  #use only unit length as a label for repeats with long units
  #rnames <- colnames(reordered)
  #rnames_found<-match(rnames,repeat_order)
  #rnames[!is.na(rnames_found)]<-paste0("(",rnames_found[!is.na(rnames_found)],")")
  #rnames[(nchar(rnames) > 5)] <-
  #  paste0(nchar(colnames(reordered)), "mer")[nchar(rnames) > 5]
  #colnames(reordered) <- rnames
  
  #=boxplot(reordered[,1:12]/100,col="gold",las=2,main=paste(ape,"most abundant"))
  boxplot(log((reordered[,1:nrepeats_subset]/100000)+0.0000000001),col="gold",las=2,main=paste(gsub("Homo","Human",ape)),ylab="repeat density in kb/Mb",yaxt="n", outline=FALSE) #logs
  box(lwd=2) 
  max_of_y<-round(max(reordered[,1:nrepeats_subset]/100000))
  axis(side=2, at=sapply(c(1,5,10,20,30,40,50), FUN=function(x) log(x)),labels=c(1,5,10,20,30,40,50))
  #abline(v=12.5,col="red")
  most_abundant_for_each_species[ape]<-list(colnames(log(reordered[,1:500])))
}

@

<<Heatmap for Figure S9>>=
par(cex=0.5)
par(mar=c(5,0,1,2))
matrix_of_most_abundant<-as.data.frame(sapply(most_abundant_for_each_species[], function(x) { x[1:12] }))

unique_list_of_most_abundant_for_each_species<-unique(as.vector(t(matrix_of_most_abundant)))

#data_for_heatmap<-abundantSpeciesVsRepeats[,unique_list_of_most_abundant_for_each_species]
data_for_heatmap<-abundantSpeciesVsRepeats[,c(unique_list_of_most_abundant_for_each_species,"AACCCT")] #including telomeric repeat

data_for_heatmap[data_for_heatmap == 0] <- NA
#data_for_heatmap<-data_for_heatmap[,order(colSums(is.na(data_for_heatmap)),colSums(data_for_heatmap,na.rm=TRUE))]

data_for_heatmap<-as.data.frame(data_for_heatmap)
print(colnames(data_for_heatmap))

repeat_order_telomeric<-c(repeat_order,"AACCCT")
data_for_heatmap<-data_for_heatmap[,repeat_order_telomeric]

#USE THIS CODE FOR SUBSPECIES
indicies_Gorilla_gorilla_gorilla<-grep("Gorilla_gorilla_gorilla",rownames(abundantSubSpeciesVsRepeats),value=FALSE)
indicies_Gorilla_beringei_graueri<-grep("Gorilla_beringei_graueri",rownames(abundantSubSpeciesVsRepeats),value=FALSE)
indicies_Gorilla_gorilla_diehli<-grep("Gorilla_gorilla_diehli",rownames(abundantSubSpeciesVsRepeats),value=FALSE)
indicies_for_Gorilla<-c(indicies_Gorilla_gorilla_gorilla,indicies_Gorilla_beringei_graueri,indicies_Gorilla_gorilla_diehli)

indicies_Pan_troglodytes_ellioti<-grep("Pan_troglodytes_ellioti",rownames(abundantSubSpeciesVsRepeats),value=FALSE)
indicies_Pan_troglodytes_schweinfurthii<-grep("Pan_troglodytes_schweinfurthii",rownames(abundantSubSpeciesVsRepeats),value=FALSE)
indicies_Pan_troglodytes_troglodytes<-grep("Pan_troglodytes_troglodytes",rownames(abundantSubSpeciesVsRepeats),value=FALSE)
indicies_Pan_troglodytes_verus<-grep("Pan_troglodytes_verus",rownames(abundantSubSpeciesVsRepeats),value=FALSE)

indicies_for_Chimpanzee<-c(indicies_Pan_troglodytes_ellioti,indicies_Pan_troglodytes_schweinfurthii,indicies_Pan_troglodytes_troglodytes,indicies_Pan_troglodytes_verus)

indicies_for_Bonobo<-grep("Pan_paniscus",rownames(abundantSubSpeciesVsRepeats),value=FALSE)

indicies_for_Human<-grep("Homo",rownames(abundantSubSpeciesVsRepeats),value=FALSE)
indicies_for_Sumatran<-grep("Pongo_abelii",rownames(abundantSubSpeciesVsRepeats),value=FALSE)
indicies_for_Bornean<-grep("Pongo_pygmaeus",rownames(abundantSubSpeciesVsRepeats),value=FALSE)

indicies_sub_species<-c(indicies_for_Gorilla,indicies_for_Chimpanzee,indicies_for_Bonobo,indicies_for_Human,indicies_for_Sumatran,indicies_for_Bornean)
borders_of_subspecies<-sapply(list(indicies_Gorilla_gorilla_gorilla,indicies_Gorilla_beringei_graueri,indicies_Gorilla_gorilla_diehli,indicies_Pan_troglodytes_ellioti,indicies_Pan_troglodytes_schweinfurthii,indicies_Pan_troglodytes_troglodytes,indicies_Pan_troglodytes_verus,indicies_for_Bonobo,indicies_for_Human,indicies_for_Sumatran,indicies_for_Bornean),function(x) {length(x)})

stopifnot(length(indicies_sub_species)==nrow(data_for_heatmap))

data_for_heatmap<-data_for_heatmap[indicies_sub_species,] #sort based on the subspecies

light_colors<-rev(c("#ffd5d5","#adffad","#d2e8ff","#dbdbdb","#fef6cc","#ffe3c8"))
dark_colors<-rev(c("firebrick1","darkgreen","dodgerblue","gray30","gold","darkorange2"))
col_breaks = c(seq(0,99,length=100),  #light
               seq(100,1000,length=100), 
               seq(1001,2000,length=100),
               seq(2001,5000,length=100),
               seq(5001,22120,length=100))             #dark

#colored heatmap in Figure S9
for (i in 1:6) {
  my_palette <- colorRampPalette(c(light_colors[i],dark_colors[i]))(n = 499)
  tiff(file=paste0(i,"subspecies.tiff"),units="px", width=3000, height=3000, res=300,compression="rle")
  heatmap.2(t(as.matrix(data_for_heatmap)/100),dendrogram="none", Colv=FALSE, Rowv=FALSE, col=my_palette,cexCol=0.5,keysize=0.75,main=paste("unique list of ",length(unique_list_of_most_abundant_for_each_species),"repeats with highest repeat density; log"),sepcolor=c("black"),trace="none", breaks=col_breaks, colsep=seq(0,nrow(data_for_heatmap),1), rowsep=seq(0,ncol(data_for_heatmap),1)) #,cexRow=0.1,cexCol=0.75 colsep=c(0,cumsum(borders_of_subspecies)) colsep=c(0:ncol(t(log(data_for_heatmap))))
  dev.off()
  
}

data_for_heatmap$species<-gsub("\\..*","",rownames(data_for_heatmap))   #changed from rownames(data_for_heatmap)
density_mean_per_species<-as.data.frame(aggregate(data_for_heatmap[,1:39],by=list(data_for_heatmap$species),mean,na.rm=TRUE))

rownames(density_mean_per_species)<-density_mean_per_species[,1] #the first column contains species names
density_mean_per_species<-as.data.frame(density_mean_per_species[,-1]) #drop the column now when the information is in the rownames

#check that loaded repeat names match those from the dataframe
original_names<-sort(as.character(colnames(density_mean_per_species)))
#repeat_order_telomeric<-c(repeat_order,"AACCCT")
loaded_names<-sort(as.character(repeat_order))
#loaded_names<-sort(as.character(repeat_order_telomeric)) #use if telomeres should be included

stopifnot(original_names==loaded_names)
@

<<FIGURE 1C>>=
#single heatmap with all three technologies
library(gplots)
par(cex=1.1)
setwd("/Users/polly/Desktop/projects/heterochromatin/heatmaps")
species_vector<-c("Gorilla","Chimpanzee","Bonobo","Human","Sumatran","Bornean")
nr<-39

species_order<-c("Gorilla","Chimpanzee","Bonobo","Human","SumatranOrangutan","BorneanOrangutan")
repeat_order<-c("AATGG","ACTCC","AAAG","AATGGAGTGG","AATGGAATGGAGTGG","AATGGAGTGGAGTGG","AAGTGGAATGG","AATGGAATGTG","AAAGTGGAATGG","AACGTGGAATGG","AATGGAATGTGG","AATGGAATGGAATGTGG","AATGGAATGGAATGGAATGTGG","AAATGGACTCGAATGGAATCATC","AATCGAATGGAATGG","AAATGGAATCGAATGGAATCATC","AATCATCGAATGGAATCGAATGG","AATCATCGAATGGACTCGAATGG","AATCATCATGAATGGAATCGAATGG","AAATGGAATCGAATGGAATCATCATC","AAATGGAATCGAATGTAATCATCATC","AATCATCATCGAATGGAATCGAATGG","AAACATGTAAATATTTACACAGAATCTGTAT","AAATATCTACACCGCTATCTGTATGAACATGG","AAATATCTACACCGCCATCTGTATGAACATGG","AAACATGGAAATATCTACACAGCCATCTGTAT","AAACATGGAAATATCTACACCACCATCTGTAT","AAACATGGAAATATCTACACCACTATCTGTAT","AAACATGGAAATATCTACACCGCCATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTGT","AAACATGGAAATATCTACACTGCCATCTGTAT","AAACATGGAAATATCTACACTGCTATCTGTAT","AAACATGGAAATATCTACACCGCGATCTGTAT","AAACATGGAAATATCTACACCGCCATCTCTAT","AAACATGGAAATATCTACACCGCTATCTCTAT","AAATATCTACACAGCTATCTGTATGAACATGG","AAATATCTACACCACTATCTGTATGAACATGG","AAATATCTACACCGCTATCTGCATGAACATGG")


roundedStr <- function(arg1) {
  number_to_compare<-as.numeric(as.character(arg1))
  if (number_to_compare<0.01) {
    small_numbers_correction<-as.character("") #trace values or no values; the cell should be present, but without the written value
    return(small_numbers_correction)
  } else {
    formatted<-format(round(arg1, digits=2), big.mark=",", nsmall = 2, width=5, justify = "centre")
    return(formatted)
  }
}

loadDensities <-function(fileName) {
  at<-as.data.frame(read.table(fileName,sep=" ",header=TRUE,row.names=1))[,1:39]
  at[at == 0] <- NA
  atm<-as.matrix(at)
  
  #check that loaded repeat names match those from the dataframe
  original_names<-sort(as.character(colnames(atm)))
  loaded_names<-sort(as.character(repeat_order))
  stopifnot(original_names==loaded_names)
  
  stopifnot(sort(species_order)==sort(rownames(atm)))
  
  atm<-atm[species_order,repeat_order] #REORDER TO MATCH SPECIFIC REPEAT AND SPECIES ORDER
  
  atm <- rbind(atm, 22.120) #add mock species in order to keep the color scheme consistent across plots; max value here
  atm <- rbind(atm, 0) #add mock species in order to keep the color scheme consistent across plots; min value here
  return(atm)
}

#NANOPORE
nanopore_data<-loadDensities("/Users/polly/Desktop/projects/heterochromatin/nanopore/nanopore_lengths/consensus/nanopore.filtered_consensus.species.density.calculation")
nanopore_data<-nanopore_data/1000 #CONVERT FROM BPS TO KBS
#PACBIO
pacbio_data<-loadDensities("/Users/polly/Desktop/projects/heterochromatin/nanopore/nanopore_lengths/consensus/pacbio.filtered_consensus.species.density.calculation")
pacbio_data<-pacbio_data/1000 #CONVERT FROM BPS TO KBS
#ILLUMINA  
illumina_data<-density_mean_per_species
rownames(illumina_data) = gsub("Homo","Human", rownames(illumina_data))
rownames(illumina_data) = gsub("Sumatran","SumatranOrangutan", rownames(illumina_data))
rownames(illumina_data) = gsub("Bornean","BorneanOrangutan", rownames(illumina_data))
illumina_data<-illumina_data[species_order,]
illumina_data <- rbind(illumina_data, 22.12000) #add mock species in order to keep the color scheme consistent across plots; max value here
illumina_data <- rbind(illumina_data, 0) #add mock species in order to keep the color scheme consistent across plots; min value here
illumina_data<-illumina_data/100000 #CONVERT TO KBS

stopifnot(rownames(illumina_data)[1:6]==rownames(nanopore_data)[1:6]) #check if the same species order is used
stopifnot(rownames(nanopore_data)[1:6]==rownames(pacbio_data)[1:6]) 

stopifnot(colnames(illumina_data)==colnames(nanopore_data)) #check if the same repeat order is used
stopifnot(colnames(nanopore_data)==colnames(pacbio_data)) 

I<-t(illumina_data)
N<-t(nanopore_data)
P<-t(pacbio_data)

colnames(I)<-paste0(c(species_vector,"max","min"),"_Illumina")
colnames(N)<-paste0(c(species_vector,"max","min"),"_Nanopore")
colnames(P)<-paste0(c(species_vector,"max","min"),"_PacBio")

INP<-as.data.frame(cbind(I,N,P))

light_colors<-c("#ffd5d5","#adffad","#d2e8ff","#dbdbdb","#fef6cc","#ffe3c8")
dark_colors<-c("firebrick1","darkgreen","dodgerblue","gray30","gold","darkorange2")

simulated<-as.matrix(INP)
col_breaks = c(seq(0,0.099,length=100),  #light
               seq(0.1,1,length=100), 
               seq(1.001,2,length=100),
               seq(2.001,5,length=100),
               seq(5.001,22.12,length=100))             #dark
 
for (i in 1:6) {
  species<-species_vector[i]
  tiff(file=paste0(species,".tiff"),units="px", width=2200, height=3000, res=300,compression="rle")
  
  my_palette <- colorRampPalette(c(light_colors[i],dark_colors[i]))(n = 499)
  cell_values <<- as.matrix(simulated[,seq(i,ncol(simulated),length(species_vector)+2)])
  cell_values<-cbind(cell_values,rep(22,39))
  cell_labels<-as.data.frame(cell_values)
  cell_labels[is.na(cell_labels)] <- 0
  
  cell_labels<-as.matrix(apply(cell_labels,2,function(x) {sapply(x, roundedStr)}), stringsAsFactors=FALSE) #for each column, apply formatting
  heatmap.2(cell_values,cellnote=cell_labels,notecol="black",dendrogram="none", Colv=FALSE, Rowv=FALSE, trace='none',col=my_palette, margins = c(5,20), breaks=col_breaks, sepcolor="white",colsep=c(0:ncol(cell_values)),rowsep=c(0:nrow(cell_values)),sepwidth=c(0.05,0.05),srtCol = 45)
  dev.off()
}

@


<<FIGURE1A, repeat densities per individual repeats, repeat groups and species>>=
#par(mfrow=c(2,1))
library("e1071")

myDivision <- function(arguments){
  smaller<-min(arguments[1],arguments[2])
  larger<-max(arguments[1],arguments[2])
  stopifnot(smaller>0)
return(larger/smaller)
}

divideBy100 <- function(argument){
return(argument/100)
}

uniq_names_species<-c("Homo","Pan_troglodytes","Pan_paniscus","Gorilla","Pongo_abelii","Pongo_pygmaeus")
uniq_names_subspecies<-c("Homo_sapiens","Pan_troglodytes_schweinfurthii","Pan_troglodytes_troglodytes","Pan_troglodytes_ellioti","Pan_troglodytes_verus","Pan_paniscus","Gorilla_gorilla_gorilla","Gorilla_beringei_graueri","Pongo_pygmaeus","Pongo_abelii")

#calculate sum of repeat densities for each individual; individuals must match correct species name (rows) and only non-zero repeat motifs will be considered (columns)
repVariability<-lapply(uniq_names_subspecies, function(x) rowSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,])!=0],na.rm = TRUE))
repVariability<-lapply(repVariability,divideBy100) #normalize 100bp reads into bps

yellow_group_GGAAT_related<-c("AATGG","ACTCC","AATGGAGTGG","AAGTGGAATGG","AATGGAATGTG","AAAGTGGAATGG","AACGTGGAATGG","AATGGAATGTGG","AATGGAATGGAGTGG","AATGGAGTGGAGTGG","AATCGAATGGAATGG","AATGGAATGGAATGTGG","AATGGAATGGAATGGAATGTGG","AAATGGACTCGAATGGAATCATC","AAATGGAATCGAATGGAATCATC","AATCATCGAATGGAATCGAATGG","AATCATCGAATGGACTCGAATGG","AATCATCATGAATGGAATCGAATGG","AAATGGAATCGAATGGAATCATCATC","AAATGGAATCGAATGTAATCATCATC","AATCATCATCGAATGGAATCGAATGG")
green_group_32mers<-c("AAACATGTAAATATTTACACAGAATCTGTAT","AAACATGGAAATATCTACACAGCCATCTGTAT","AAACATGGAAATATCTACACCACCATCTGTAT","AAACATGGAAATATCTACACCACTATCTGTAT","AAACATGGAAATATCTACACCGCCATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTAT","AAACATGGAAATATCTACACCGCTATCTGTGT","AAACATGGAAATATCTACACTGCCATCTGTAT","AAACATGGAAATATCTACACTGCTATCTGTAT","AAACATGGAAATATCTACACCGCGATCTGTAT","AAACATGGAAATATCTACACCGCCATCTCTAT","AAACATGGAAATATCTACACCGCTATCTCTAT","AAATATCTACACAGCTATCTGTATGAACATGG","AAATATCTACACCACTATCTGTATGAACATGG","AAATATCTACACCGCTATCTGTATGAACATGG","AAATATCTACACCGCCATCTGTATGAACATGG","AAATATCTACACCGCTATCTGCATGAACATGG")
white_group<-c("AAAG")

repeatDensityForAMotifSpecies <- function(motif){
  rd<-paste(uniq_names_species,lapply(uniq_names_species, function(x) round(mean(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,motif],na.rm = TRUE)/100000,2)))
return(rd)
}

repeatDensityForAMotifSubSpecies <- function(motif){
  rd<-paste(uniq_names_subspecies,lapply(uniq_names_subspecies, function(x) round(mean(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,motif],na.rm = TRUE)/100000,2)))
return(rd)
}

#SHOW DENSITIES FOR EACH SPECIES SEPARATELY
#AATGG
repeatDensityForAMotifSpecies("AATGG")

#yellow_group_GGAAT_related
denisities_for_yellow_group_GGAAT_related<-lapply(yellow_group_GGAAT_related,repeatDensityForAMotifSpecies)
lapply(seq_along(1:6),function(i)
         unlist(lapply(denisities_for_yellow_group_GGAAT_related, `[[`, i)))
#green_group_32mers
denisities_for_green_group_32mers<-lapply(green_group_32mers,repeatDensityForAMotifSpecies)
lapply(seq_along(1:6),function(i)
         unlist(lapply(denisities_for_green_group_32mers, `[[`, i)))

@

<<Figure 1A>>=
#DESCRIPTIVE STATISTICS
sd<-unlist(lapply(repVariability, function(x) round(sd(x),2)))
min<-unlist(lapply(repVariability, function(x) round(x[which.min(abs(x))],0)))
max<-unlist(lapply(repVariability, function(x) round(x[which.max(abs(x))],0)))
skewness<-unlist(lapply(repVariability, function(x) skewness(x)))

mean_fold_dif<-unlist(lapply(repVariability, function(x) mean(apply(combn(x,2),2, myDivision))))
print(mean_fold_dif)


par(mfrow=c(2,1))
distribution_summary<-as.data.frame(cbind(uniq_names_subspecies,as.numeric(min),as.numeric(max),sd,mean_fold_dif))
colnames(distribution_summary)<-c("species","min","max","sd","mean_fold_dif")
distribution_summary<-distribution_summary[order(mean_fold_dif,decreasing=F),]
print(distribution_summary)


myColors<-c(rep("gray30",1),rep("darkgreen",4),rep("dodgerblue",1),rep("firebrick1",2),rep("gold",2))

#DRAW BOXPLOT OF REPEAT DENSITIES
boxplot(repVariability,names=paste(uniq_names_subspecies,lengths(repVariability)),las=2,col=sapply(myColors,adjustcolor,alpha=0.4),outline=TRUE)
stripchart(repVariability, vertical = TRUE, 
    method = "jitter", add = TRUE, pch = 20, col = 'blue')

#CALCULATE MEANS OF REPEAT DENSITIES
print(paste(uniq_names_subspecies,lapply(repVariability,mean)))

len <- sapply(repVariability,length)
n <- max( len )
len <- n - len
dt<-mapply( function(x,y) c(rep( NA , round(y/2)), x , rep( NA , y-round(y/2)) ) , repVariability , len, SIMPLIFY = TRUE)
rownames(dt)<-NULL
colnames(dt)<-uniq_names_subspecies
#dt<-as.data.frame(dt)
plot.new()
dotchart(dt,labels="",gcol="black",col="black",lcolor="white",xlab="repeat density per 1 million bps",pch=20,cex=1.2)
plot.new()

myColors<-c("gray30","darkgreen","dodgerblue","firebrick1","gold","orange")

repVariabilityBig<-lapply(uniq_names_species, function(x) rowSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,])!=0],na.rm = TRUE))
repVariabilityBig<-lapply(repVariabilityBig,divideBy100) #normalize 100bp reads into bps

#DRAW BOXPLOT OF REPEAT DENSITIES
boxplot(repVariabilityBig,names=paste(uniq_names_species,lengths(repVariabilityBig)),las=2,col=myColors,outline=TRUE)

#CALCULATE MEANS OF REPEAT DENSITIES
print("MEAN OF REPEAT DENSITIES FOR ALL REPEATED MOTIFS")
print(paste(uniq_names_species,lapply(repVariabilityBig,mean)))

#SPECIES AND SUBSPECIES COMBINED
#HUMAN      1
#CHIMPANZEE 2,3,4,5
#BONOBO     6
#GORILLA    7,8
#BORNEAN    9
#SUMATRAN   10

par(mfrow=c(2,1))
repVariabilityBoth<-c(repVariabilityBig[1],repVariabilityBig[2],repVariability[2],repVariability[3],repVariability[4],repVariability[5],repVariabilityBig[3],repVariabilityBig[4],repVariability[7],repVariability[8],repVariabilityBig[5],repVariabilityBig[6])
names_both<-c("Human","Chimpanzee","Eastern chimpanzee","Central chimpanzee","Cameroon chimpanzee","Western chimpanzee","Bonobo","Gorilla","Western lowland gorilla","Eastern lowland gorilla","Bornean orangutan","Sumatran orangutan")
myColorsBoth<-c(rep("gray30",1),rep("darkgreen",5),rep("dodgerblue",1),rep("firebrick1",3),rep("gold",2))

boxplot(repVariabilityBoth,names=paste(names_both,lengths(repVariabilityBoth)),las=2,col=sapply(myColorsBoth,adjustcolor,alpha=0.4),outline=FALSE)
stripchart(repVariabilityBoth, vertical = TRUE, 
    method = "overplot", add = TRUE, pch = 20, col = 'blue')

ddd=matrix(sample(1:30,15) , nrow=3)

List <- list()

List[[1]] <- c(mean(as.numeric(unlist(repVariabilityBig[1])),na.rm=TRUE),mean(as.numeric(unlist(repVariabilityBig[2])),na.rm=TRUE),mean(as.numeric(unlist(repVariabilityBig[3])),na.rm=TRUE),mean(as.numeric(unlist(repVariabilityBig[4])),na.rm=TRUE),mean(as.numeric(unlist(repVariabilityBig[5])),na.rm=TRUE),mean(as.numeric(unlist(repVariabilityBig[6])),na.rm=TRUE)) #GROUP1

List[[2]] <- c(NA,mean(as.numeric(unlist(repVariability[2])),na.rm=TRUE),NA,mean(as.numeric(unlist(repVariability[7])),na.rm=TRUE),NA,NA) #GROUP2

List[[3]] <- c(NA,mean(as.numeric(unlist(repVariability[3])),na.rm=TRUE),NA,mean(as.numeric(unlist(repVariability[8])),na.rm=TRUE),NA,NA) #GROUP3

List[[4]] <- c(NA,mean(as.numeric(unlist(repVariability[4])),na.rm=TRUE),NA,NA,NA,NA) #GROUP4

List[[5]] <- c(NA,mean(as.numeric(unlist(repVariability[5])),na.rm=TRUE),NA,NA,NA,NA) #GROUP5

Matrix = do.call(rbind, List)
colnames(Matrix)=c("Human","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")
qualitative_colors<-rep("white",30)
qualitative_colors[1]<-"gray"
qualitative_colors[6]<-"darkgreen"
qualitative_colors[7]<-"darkolivegreen1"
qualitative_colors[8]<-"darkolivegreen2"
qualitative_colors[9]<-"darkolivegreen3"
qualitative_colors[10]<-"darkolivegreen4"
qualitative_colors[11]<-"blue"
qualitative_colors[16]<-"red"
qualitative_colors[17]<-"indianred2"
qualitative_colors[18]<-"indianred3"
qualitative_colors[21]<-"gold"
qualitative_colors[26]<-"orange"

df.bar <- barplot(Matrix, col=qualitative_colors, border="white", font.axis=2, beside=T, xlab="group", font.lab=2, ylim=c(0,200000),space=c(0,1))

#SPECIES
points(x = rep(df.bar[1,1],length(unlist(repVariabilityBig[1]))), y =unlist(repVariabilityBig[1]),pch=20,col="black")
#points(x = rep(df.bar[1,2],length(unlist(repVariabilityBig[2]))), y =unlist(repVariabilityBig[2]),pch=20,col="black")
points(x = rep(df.bar[1,3],length(unlist(repVariabilityBig[3]))), y =unlist(repVariabilityBig[3]),pch=20,col="black")
#points(x = rep(df.bar[1,4],length(unlist(repVariabilityBig[4]))), y =unlist(repVariabilityBig[4]),pch=20,col="black")
points(x = rep(df.bar[1,5],length(unlist(repVariabilityBig[5]))), y =unlist(repVariabilityBig[5]),pch=20,col="black")
points(x = rep(df.bar[1,6],length(unlist(repVariabilityBig[6]))), y =unlist(repVariabilityBig[6]),pch=20,col="black")

#SUBSPECIES CHIMPANZEE
points(x = rep(df.bar[2,2],length(unlist(repVariability[2]))), y =unlist(repVariability[2]),pch=20,col="black")
points(x = rep(df.bar[3,2],length(unlist(repVariability[3]))), y =unlist(repVariability[3]),pch=20,col="black")
points(x = rep(df.bar[4,2],length(unlist(repVariability[4]))), y =unlist(repVariability[4]),pch=20,col="black")
points(x = rep(df.bar[5,2],length(unlist(repVariability[5]))), y =unlist(repVariability[5]),pch=20,col="black")

#SUBSPECIES GORILLA
points(x = rep(df.bar[2,4],length(unlist(repVariability[7]))), y =unlist(repVariability[7]),pch=20,col="black")
points(x = rep(df.bar[3,4],length(unlist(repVariability[8]))), y =unlist(repVariability[8]),pch=20,col="black")

@

<<statistics about the repeat density, in bp/Mb>>=

#LESS ABUNDANT REPEATED MOTIFS
all_repeated_motifs<-colnames(abundantIndividualsVsRepeats)
less_abundant_repeated_motifs<-all_repeated_motifs[is.na(pmatch(all_repeated_motifs,unique_list_of_most_abundant_for_each_species))]
stopifnot(length(all_repeated_motifs)==(length(less_abundant_repeated_motifs)+length(unique_list_of_most_abundant_for_each_species)))

repVariabilityLessAbundant <-
  lapply(uniq_names_species, function(x)
    rowSums(abundantIndividualsVsRepeats[grepl(x, rownames(abundantIndividualsVsRepeats)) ==
                                           TRUE, colSums(abundantIndividualsVsRepeats[grepl(x, rownames(abundantIndividualsVsRepeats)) ==
                                                                                        TRUE, less_abundant_repeated_motifs]) != 0], na.rm = TRUE))
repVariabilityLessAbundant<-lapply(repVariabilityLessAbundant,divideBy100) #normalize 100bp reads into bps
print("LESS ABUNDANT REPEATED MOTIFS")
print(paste(uniq_names_species,lapply(repVariabilityLessAbundant,mean)))

#MOST ABUNDANT REPEATED MOTIFS
repVariabilityMostAbundant<-lapply(uniq_names_species, function(x) rowSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,colSums(abundantIndividualsVsRepeats[grepl(x,rownames(abundantIndividualsVsRepeats))==TRUE,unique_list_of_most_abundant_for_each_species])!=0],na.rm = TRUE))
repVariabilityMostAbundant<-lapply(repVariabilityMostAbundant,divideBy100) #normalize 100bp reads into bps

print("MEAN DENSITY OF MOST ABUNDANT REPEATED MOTIFS")
print(paste(uniq_names_species,lapply(repVariabilityMostAbundant,mean)))

@

<<Figure S8, density versus level of shared repeats>>=

denshar<-as.data.frame(data_for_heatmap[,1:(ncol(data_for_heatmap)-1)])

plot((nrow(denshar)-colSums(is.na(denshar))),log(colMeans(denshar,na.rm=TRUE)),ylab="log of average density of repeated motif across all individuals",xlab="number of individuals that carry this repeated motif",col="blue",pch=19,cex=1.5,cex.lab=1.5,main="39 most abundant repeated motifs")

par(mar=c(6,6,4.1,2.1))
palette("default")
denshar<-density_mean_per_species
colors_shared<-as.factor(colSums(is.na(denshar[,2:ncol(denshar)]))>0)
plot(1:39,log(colMeans(denshar[,repeat_order],na.rm=TRUE)),ylab="log of average density of repeated motif across 6 species",xlab="39 repeated motifs",pch=19,cex=1.8,cex.lab=1.8,xlim=c(1,39),main="",col=colors_shared,xaxt='n')
axis(1, at=c(1,5,10,15,20,25,30,35,39), labels=c(1,5,10,15,20,25,30,35,39))

legend(15, 14, legend=c("repeated motifs in all 6 species", "repeated motifs shared among subset of species"),col=c("black", "red"), pch=19,cex=1.8)

mean_repeat_density_for_species<-as.numeric(lapply(repVariabilityBig,mean))

plot(log(mean_repeat_density_for_species),log(species_specific),xlab="log of mean repeat density for a species",ylab="log of number of species-specific repeats",col="blue",cex.lab=1.4,cex.axis=1.4) #"Homo"       "Chimpanzee" "Bonobo"     "Gorilla"    "Sumatran"   "Bornean" 
text(log(mean_repeat_density_for_species),log(species_specific)+0.15,labels=myList,cex=1.4)

par(mfrow=c(3,3))
myList<-c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")

for (replicate in seq(1,9,1)){
  print(replicate)
  replicate_mean_repeat_density_for_species_tmp <- lapply(repVariabilityBig,function(x) {x[sample(seq(1:length(x)),5,replace=FALSE)]}) #subsample individuals in order to have equal sample size for each species
  replicate_mean_repeat_density_for_species<-as.numeric(lapply(replicate_mean_repeat_density_for_species_tmp,mean)) #calculate mean
  
  
  replicate_binary<-createBinary(abundantSpeciesVsRepeats,unique_species,c(9,19,13,27,5,5),5)
  replicate_species_specific<-returnSpeciesSpecificCounts(as.data.frame(replicate_binary))
  print(replicate_species_specific)
  
  plot(log(replicate_mean_repeat_density_for_species),log(species_specific),xlab="log of mean repeat density for a species",ylab="log of number of species-specific repeats",col="blue",cex.lab=1.2,cex.axis=1.4,main=paste("replicate",replicate),cex=1.1,xlim=c(8,12),ylim=c(0,10)) #"Homo"       "Chimpanzee" "Bonobo"     "Gorilla"    "Sumatran"   "Bornean" 
  text(log(replicate_mean_repeat_density_for_species),log(species_specific)+0.4,labels=myList,cex=1)
}


@

<<Figure S14, TELOMERIC REPEAT>>=
#the rank of the telomeric repeat
which(as.numeric(rowSums(density))==as.numeric(rowSums(density["AACCCT",])))
#how does the telomeric repeat density compares to the minimal density in the set of 39 repeated motifs
print(min(rowSums(density[unique_list_of_most_abundant_for_each_species,])))
print(rowSums(density["AACCCT",]))

#as.data.frame(sapply(most_abundant_for_each_species[], function(x) { x[1:38] })) telomeric repeat ranks 38th in the Bornean orangutan

@



<<Figure 2A, Supplementary Note 3>>=
library("ggplot2")
library("ggfortify")
library("plot3D")
library("rgl")
par(mfrow=c(2,1),cex=1.1)

pca_data<-as.data.frame(na.omit(abundantSpeciesVsRepeats[,]))
pca_data$species<-rownames(pca_data)
pca_data$species<-factor(pca_data$species)
sex<-paste(lapply(strsplit(rownames(abundantIndividualsVsRepeats)," "), function(x) x[3]))
pca_data$sex<-sex
pca_data<-pca_data[with(pca_data, order(species)), ]

#Human (black), bonobo (blue), chimpanzee (green), gorilla (red) and orangutan (gold and orange) are plotted in the space defined by principal components

palette(c("blue","gold","darkgreen","red","gray24","orange")) #pick color scheme
stopifnot(exists("unique_list_of_most_abundant_for_each_species"))

#plot first two principal components in 2D space
pca_calculation<-pca_data[,c(unique_list_of_most_abundant_for_each_species,"species")]
pca_species_shapes<-c("blue","gold","darkgreen","red","black","orange")

a<-autoplot(prcomp(pca_calculation[,c(unique_list_of_most_abundant_for_each_species)]),x=1,y=2, data = pca_calculation, colour = 'species',size=3,label.size = 12)
a + theme_bw(base_size = 30) + scale_fill_manual(values = pca_species_shapes) + scale_color_manual(values = pca_species_shapes) 

a<-autoplot(prcomp(pca_calculation[,c(unique_list_of_most_abundant_for_each_species)]),x=2,y=3, data = pca_calculation, colour = 'species',size=3,label.size = 12)
a + theme_bw(base_size = 30) + scale_fill_manual(values = pca_species_shapes) + scale_color_manual(values = pca_species_shapes) 

a<-autoplot(prcomp(pca_calculation[,c(unique_list_of_most_abundant_for_each_species)]),x=1,y=3, data = pca_calculation, colour = 'species',size=3,label.size = 12)
a + theme_bw(base_size = 30) + scale_fill_manual(values = pca_species_shapes) + scale_color_manual(values = pca_species_shapes) 

#summary statistics
print(summary(prcomp(pca_calculation[,c(unique_list_of_most_abundant_for_each_species)])))

@

<<Supplementary Note 3, LDA>>=
#PREDICT SPECIES BASED ON REPEATS USING LDA
library(MASS)
par(cex=1.25)
par(mar=c(6,6,4.1,4.1))

most_abundant_pca_data<-pca_data[,c(unique_list_of_most_abundant_for_each_species,"species","sex")]

plot.new()
number_of_repeats<-length(unique_list_of_most_abundant_for_each_species)
plot.window(xlim = c(1, number_of_repeats), ylim = c(80, 100), xlab="number of repeats used",ylab="accuracy",cex.lab=1.4,cex.main=1.5,cex.axis=1.4,xaxt='n')
axis(1, at=c(1,5,10,15,20,25,30,35,39), labels=c(1,5,10,15,20,25,30,35,39))
abline(h=95,col="red")
abline(v=14,col="blue")
box()
axis(2, at=c(80,85,90,95,97,100), labels=paste(c(80,85,90,95,97,100),"%"))

for (i in seq(2, number_of_repeats, 1)) {
  lda.fit=lda(most_abundant_pca_data$species~.,data=most_abundant_pca_data[,1:i],CV=TRUE,prior=c(1,1,1,1,1,1)/6)
  tab <- table(most_abundant_pca_data$species, lda.fit$class)
  accuracy<-sum(diag(tab))/sum(tab)*100
  print(paste(i,accuracy,"%"))
  points(i,accuracy,pch=19)
  print(tab)
  #plot(t(tab),main=paste("number of repeats",i))
}

#match to indices of Figure1C
match(colnames(most_abundant_pca_data),repeat_order)
@

<<Supplementary Note 3, most discriminating repeated motifs>>=
par(mfrow=c(2,1))
set.seed(1)
library (randomForest)

discerning_set<-most_abundant_pca_data
discerning_set$species<-as.factor(c("other","soi")[as.numeric(grepl("Homo",rownames(discerning_set)))+1])
rf=randomForest(discerning_set$species~.,data=discerning_set[,1:(ncol(discerning_set)-2)],importance=TRUE,ntree=10000,classwt=c(1,1)/2) #
importance(rf) #textual representation of how important the variables were
importance_df<-as.data.frame(importance(rf))
importance_df<-importance_df[order(-importance_df$MeanDecreaseAccuracy),]
print(head(importance_df))
significant_repeat<-rownames(importance_df)[1]

#show most discerning repeats broke down by species
discerning_by_species<-tapply(abundantSpeciesVsRepeats[,c(significant_repeat)], names(abundantSpeciesVsRepeats[,c(significant_repeat)]), mean)
discerning_formatted<-round(as.numeric(as.character(discerning_by_species))/100000,digits=2)
names(discerning_formatted)<-names(discerning_by_species)
print(significant_repeat)
print(discerning_formatted)

varImpPlot(rf) #graphical representation
print(rf)

experiment<-abundantSpeciesVsRepeats[,c("AAATGGAATCGAATGGAATCATC","AATGG","AATCGAATGGAATGG","AAATATCTACACCGCCATCTGTATGAACATGG","AAGTGGAATGG")]
experiment<-experiment[order(match(row.names(experiment),unique_species)),]
experiment<-t(experiment)

#heatmap.2(log(experiment+0.0001),cexCol=0.5,dendrogram='none',srtCol = 20,Rowv=FALSE,Colv=FALSE)
dotplot(log(experiment+0.0001),pch=19,col=c("gray30","darkgreen","dodgerblue","firebrick1","gold","orange"),cex=1.2) #"Homo"       "Chimpanzee" "Bonobo"     "Gorilla"    "Sumatran"   "Bornean"   
@


<<Supplementary Note 3>>=
#PREDICT SPECIES BASED ON REPEATS USING RANDOM FOREST
set.seed(1)
library (randomForest)
rf=randomForest(most_abundant_pca_data$species~.,data=most_abundant_pca_data[,1:(ncol(most_abundant_pca_data)-2)],importance=TRUE,ntree=10000,classwt=c(1,1,1,1,1,1)/6) #
importance(rf) #textual representation of how important the variables were
varImpPlot(rf) #graphical representation
print(rf)
@


<<FIGURE5>>=
#Hierarchical clustering does not reproduce the expected species phylogeny

plotDendrogram <- function(subset_to_plot,title_of_subset_to_plot,corMethod) {
  l <- rownames(subset_to_plot)
  l[grepl("Pan_paniscus", l) == TRUE] <- "Bonobo"
  l[grepl("Pan", l) == TRUE] <- "Chimpanzee"
  l[grepl("Gorilla", l) == TRUE] <- "Gorilla"
  #l[grepl("Pongo",l)==TRUE]<-"Orangutan"
  l[grepl("Pongo_pygmaeus", l) == TRUE] <- "Bornean"
  l[grepl("Pongo_abelii", l) == TRUE] <- "Sumatran"
  l[grepl("Homo", l) == TRUE] <- "Homo"
  
  groupCodes <- l
  rownames(subset_to_plot) <- groupCodes
  colorCodes <-
    c(
      Bonobo = "blue",
      Chimpanzee = "darkgreen",
      Gorilla = "red",
      Orangutan = "orange",
      Homo = "black"
    )
  colorCodes <-
    c(
      Bonobo = "blue",
      Chimpanzee = "darkgreen",
      Gorilla = "red",
      Sumatran = "gold",
      Bornean = "orange",
      Homo = "black"
    )
  
  dist <-
    as.dist(1 - cor((t(subset_to_plot)), method = corMethod)) #distance based on correlation
  
  #OPTIONS FOR CLUSTERING LINKAGE FUNCTIONS:
  #method="ward.D", "ward.D2", "single", "complete", "average" (= UPGMA), "mcquitty" (= WPGMA), "median" (= WPGMC) or "centroid" (= UPGMC).
  
  hc <- hclust(dist, method = "ward.D2")
  hcSingle <- hclust(dist, method = "single")
  dend <- as.dendrogram(hc)
  dendSingle <- as.dendrogram(hcSingle)
  
  subspecies<-sapply(strsplit(rownames(abundantIndividualsVsRepeats), " "), function(x)x[2])
  subspecies[grepl("Gorilla_beringei_graueri", subspecies) == TRUE] <- "GBG"
  subspecies[grepl("Gorilla_gorilla_gorilla", subspecies) == TRUE] <- "GGG"
  subspecies[grepl("Gorilla_gorilla_diehli", subspecies) == TRUE] <- "GGD"
  subspecies[grepl("Pan_troglodytes_ellioti", subspecies) == TRUE] <- "PTE"
  subspecies[grepl("Pan_troglodytes_schweinfurthii", subspecies) == TRUE] <- "PTS"
  subspecies[grepl("Pan_troglodytes_troglodytes", subspecies) == TRUE] <- "PTT"
  subspecies[grepl("Pan_troglodytes_verus", subspecies) == TRUE] <- "PTV"
  subspecies[grepl("Pan_paniscus", subspecies) == TRUE] <- "PP"
  subspecies[grepl("Pongo_abelii", subspecies) == TRUE] <- "PA"
  subspecies[grepl("Pongo_pygmaeus", subspecies) == TRUE] <- "PY"
  subspecies[grepl("Homo_sapiens", subspecies) == TRUE] <- "HS"
  
  names_and_sexes <-
    paste(lapply(strsplit(
      rownames(abundantIndividualsVsRepeats), " "
    ), function(x)
      x[1]),
    subspecies,
    lapply(strsplit(
      rownames(abundantIndividualsVsRepeats), " "
    ), function(x)
      x[3]))
  
  # Assigning the labels of dendrogram object with new colors:
  labels_colors(dend) <-
    colorCodes[groupCodes][order.dendrogram(dend)]
  labels(dend) <- names_and_sexes[order.dendrogram(dend)]
  labels_colors(dendSingle) <-
    colorCodes[groupCodes][order.dendrogram(dendSingle)]
  labels(dendSingle) <-
    names_and_sexes[order.dendrogram(dendSingle)]
  
  plot(dend, main = paste("Clustering", title_of_subset_to_plot, "using linkage function 'complete'"))
  #plot(dendSingle, main = paste("Clustering", title_of_subset_to_plot, "using linkage function 'single'"))
}

sampleToCluster<-abundantIndividualsVsRepeats

corMethod<-"spearman"
tiff(file=paste0("all repeated motifs.",corMethod,".hclust",".tiff"),units="px", width=3000, height=1000, res=200,compression="rle")
par(mar=c(10,6,4,1)+.1)
plotDendrogram(sampleToCluster,"all repeated motifs",corMethod)
dev.off()

tiff(file=paste0("39 most abundant motifs.",corMethod,".hclust",".tiff"),units="px", width=3000, height=1000, res=200,compression="rle")
par(mar=c(10,6,4,1)+.1)
plotDendrogram(sampleToCluster[,unique_list_of_most_abundant_for_each_species],"39 most abundant motifs",corMethod)
dev.off()

tiff(file=paste0("exluding 32-mers and 31-mer",corMethod,".hclust",".tiff"),units="px", width=3000, height=1000, res=200,compression="rle")
par(mar=c(10,6,4,1)+.1)
plotDendrogram(sampleToCluster[,nchar(colnames(sampleToCluster))!=32 & nchar(colnames(sampleToCluster))!=31],"exluding 32-mers and 31-mer",corMethod)
dev.off()

@

<<FIGURE 5>>=
par(mfrow=c(1,1),cex=1)
set.seed(1) #make the results reproducible

#DIVIDE BY SPECIES
setwd("/Users/polly/Desktop/projects/heterochromatin/phylogeny")

myList = c("Homo", "Pan_paniscus", "Pan_troglodytes", "Gorilla", "Pongo_abelii", "Pongo_pygmaeus")
#myList = c("Homo","Chimpanzee","Bonobo","Gorilla","Sumatran","Bornean")

returnCorrelationMatrix <- function(vector,correlation_method) {
  subset<-as.matrix(Filter(function(x) sd(x) != 0, as.data.frame(vector)))
  x <- cor(subset,method=correlation_method,use="complete.obs")
  return(x)
}

returnCorrelationVector <- function(vector,correlation_method) {
  subset<-as.matrix(Filter(function(x) sd(x) != 0, as.data.frame(vector)))
  corVector<-correlate(subset,method=correlation_method)
  corVector <- shave(corVector)
  corVector<-corVector[,-1] #drop empty column
  corVector<-unlist(as.matrix(corVector)) #drop rownames and tibble format
  corVector <- corVector[!is.na(corVector)] #remove NAs
  corVector<-as.vector(as.numeric(corVector)) 
  return(sort(corVector))
}

for (ape in myList) {
  print(ape)
  
  #get most abundant repeats for each species
  corData <- abundantIndividualsVsRepeats
  
  repeat_motifs_to_use<-repeat_order #as.character(unlist(most_abundant_for_each_species[ape]))
  corData<-corData[grepl(ape, rownames(corData)) == TRUE,repeat_motifs_to_use] #subsample first n repeats
  print(dim(corData))
  
  #get vector of all correlation coefficients that could be calculated
  correlation_method="spearman" #CHANGE HERE
  corValues<-returnCorrelationMatrix(corData,correlation_method)
  corVector<-returnCorrelationVector(corData,correlation_method)
  
  #source("http://www.sthda.com/upload/rquery_cormat.r")
  #correlation plot
  corTable<-t(corValues)
  corTable<-as.matrix(corTable,rownames.force=TRUE) #drop row with repeat names
  #class(corTable) <- "numeric"
  colnames(corTable)<-paste0("(",match(colnames(corTable),repeat_order),") ",colnames(corTable)) #combine repeat name with repeat index
  rownames(corTable)<-paste0("(",match(rownames(corTable),repeat_order),") ",rownames(corTable)) #combine repeat name with repeat index
  
  col2 <- colorRampPalette(rev(c("#67001F","#B2182B","#D6604D","#F4A582","#FDDBC7","#FFFFFF","#D1E5F0","#92C5DE","#4393C3","#2166AC","#053061")))(200)
  
  tiff(file=paste0(ape,".corrr",".tiff"),units="px", width=3000, height=3000, res=300,compression="rle")
  #bitmap(paste0(ape,".corrr",".tiff"), height = 900, width = 750, units = 'px', type="tifflzw", res=300)
  plot.new()
  corrplot(corTable,diag=FALSE,type="upper",na.label="-",col = col2,tl.col="black")
  dev.off()
  
  #todo: rewrite reshuffling
  permutations<- list()
  for (perm in 1:10){ 
    
    permutations[[perm]] <-returnCorrelationVector(apply(corData,2,sample),correlation_method)
  }
  
  #permutations<-lapply(permutations,sort)
  #reshuffledData <- apply(corData,2,sample)
  
  df <- data.frame(x =1:length(length(corData)),
                   F = apply(sapply(permutations, unlist),1,median),
                   L = apply(sapply(permutations, unlist),1,min),
                   U = apply(sapply(permutations, unlist),1,max))
  
  #df<-df[with(df, order(F)),] #sort by F column that denotes means
  df$x<-seq(1,length(df$F),1)
  
  simple_ape_name<-gsub("Pan_troglodytes","Chimpanzee",gsub("Pongo_pygmaeus","Bornean orangutan",gsub("Pongo_abelii","Sumatran orangutan",gsub("Pan_paniscus","Bonobo",gsub("Homo","Human",ape)))))
  
  
  
  tiff(file=paste0(ape,".sim",".tiff"),units="px", width=2000, height=2000, res=300,compression="rle")
  plot.new()
  plot(df$x, df$F,ylim=c(-1,1),type='l',col="red",main=simple_ape_name,ylab = "Correlation coefficient",cex.axis=1.8,cex.lab=1.8,xlab="Index C I for number of repeat comparisons")
  
  #make polygon where coordinates start with lower limit and 
  # then upper limit in reverse order
  polygon(c(df$x,rev(df$x)),c(df$L,rev(df$U)),col = "grey75", border = FALSE)
  lines(df$x, df$F, lwd = 2)
  
    points(
    corVector, #plot actually calculated correlation coefficients
    ylab = "correlation coefficient",
    ylim = c(-1, 1),
    pch = 20,
    cex=2,
    main = ape,
    xlim = c(0, length(corValues)),
    col = adjustcolor(ifelse(corVector>0, "#B2182B", "#2166AC"), alpha.f = 0.5)
  )
    
    abline(h = 0, col = "gray")
    abline(h = min(df$L), col = "gray")
    abline(h = max(df$U), col = "gray")
  #add red lines on borders of polygon
  #lines(df$x, df$U, col="red",lty=2)
  #lines(df$x, df$L, col="red",lty=2)
    dev.off()
}

@


<<Figure 3, Table S6, identify male-biased candidates>>=

#merge by species
#for each species
  #filter out non-density repeats
  #run t-test and assess significance
  #report top 5 significant repeats

#compare how much identifies repeats overlap between species by clustering
library("pwr")
library("gsubfn")
#library(MVR)

getCandidatesForSpecies <- function(colName,species,threshold) {
    transposed<-pca_data[c(colName,"species","sex")]
    
    mergeOrangutans<-gsub ("Bornean", "Orangutan", transposed$species) #ANALYZE BOTH ORANGUTAN SPECIES TOGETHER
    mergeOrangutans<-gsub ("Sumatran", "Orangutan", mergeOrangutans)
    transposed$species<-make.unique(mergeOrangutans)
    rownames(transposed)<-transposed$species
    
    transposed<-transposed[grep(species, rownames(transposed)),]
    colnames(transposed)<-c("counts","species","sex")
    transposed<-transform(transposed,counts = as.numeric(counts))
    
    if (mean(transposed$counts)>threshold) {
    
    print(colName)  
    print(paste("mean species level density: ",sum(transposed$counts)))
    toPlotAggregated<-aggregate(counts ~ sex + species, data=transposed, FUN="mean")
    print(toPlotAggregated)
    male_individuals<-as.numeric(table(transposed$sex)["M"])
    female_individuals<-as.numeric(table(transposed$sex)["F"])
    
    means<-mean(transposed[transposed$sex=="M",,drop=FALSE]$counts)-mean(transposed[transposed$sex=="F",,drop=FALSE]$counts)
    ratios<-mean(transposed[transposed$sex=="M",,drop=FALSE]$counts)/mean(transposed[transposed$sex=="F",,drop=FALSE]$counts)
    
    d<-round(as.numeric(means))
    r<-round(as.numeric(ratios),2)
    #power<-pwr.t2n.test(male_individuals,female_individuals,abs(d),alternative="less")$power
    #effect size needs to be calculated as absolute difference in means divided by the pooled std
    
    pvalue<-NaN
    #we can only run statistical test if we have positive number of male and female samples
    if (sum(transposed$sex=="M")>0 & sum(transposed$sex=="F")>0) {
      pvalue<-wilcox.test(alternative="less",transposed[transposed$sex=="F",,drop=FALSE]$counts,transposed[transposed$sex=="M",,drop=FALSE]$counts)$p.value 
      pvalue<-round(as.numeric(pvalue),2)
      }
    if (pvalue<=0.2) {
      return(c(colName,pvalue,round(mean(transposed$counts)),r,d))
      }
    }
}

getTopCandidatesForSpecies <- function(species,threshold) {
  repeats_to_iterate_over<-colnames(pca_data)[1:(ncol(pca_data)-2),drop=FALSE]
  pvalues<-lapply(repeats_to_iterate_over,getCandidatesForSpecies,species=species,threshold=threshold)
  candidates<-as.data.frame(do.call(rbind,pvalues))
  
  if(nrow(candidates) == 0){ 
    return(NULL)
  } else {
    
    colnames(candidates)<-c("unit","pvalue","avg_density","ratio","difference")
    candidates<-candidates[order(as.numeric(as.character(candidates$avg_density)),decreasing=TRUE) , ,drop=FALSE]
    return(candidates) 
  }
}

threshold<-50000 #minimum density for a repeat to be considered
#1,000,000 reads translate into 100,000,000 bp, thus 0.0005 (0.05%) repeat will cover 50,000 bps
Candidates_Chimpanzee<-getTopCandidatesForSpecies("Chimpanzee",threshold)
Candidates_Bonobo<-getTopCandidatesForSpecies("Bonobo",threshold)
Candidates_Gorilla<-getTopCandidatesForSpecies("Gorilla",threshold)
Candidates_Orangutan<-getTopCandidatesForSpecies("Orangutan",threshold)
#Candidates_Human<-getTopCandidatesForSpecies("Homo",threshold) #this function can only be called if additional humans are included in the analysis

print(Candidates_Chimpanzee)
print(Candidates_Bonobo)
print(Candidates_Gorilla)
print(Candidates_Orangutan)
#print(Candidates_Human)

#top_candidates_uniq<-unique(c(as.vector(Candidates_Human$unit),c(as.vector(Candidates_Chimpanzee$unit),as.vector(Candidates_Bonobo$unit),as.vector(Candidates_Gorilla$unit),as.vector(Candidates_Sumatran$unit),Candidates_Bornean$unit))) #this function can only be called if additional humans are included in the analysis
top_candidates_uniq<-unique(c(as.vector(Candidates_Chimpanzee$unit),as.vector(Candidates_Bonobo$unit),as.vector(Candidates_Gorilla$unit),as.vector(Candidates_Orangutan$unit)))

print(top_candidates_uniq)
@

<<Figure 3, Table S6, identify male-biased candidates, their abundance and frequency>>=
#match(as.character(unlist(most_abundant_for_each_species["Homo"])),Candidates_Human$unit) #this function can only be called if additional humans are included in the analysis
match(as.character(unlist(most_abundant_for_each_species["Chimpanzee"])),Candidates_Chimpanzee$unit)
match(as.character(unlist(most_abundant_for_each_species["Bonobo"])),Candidates_Bonobo$unit)
match(as.character(unlist(most_abundant_for_each_species["Gorilla"])),Candidates_Gorilla$unit)
#match(as.character(unlist(most_abundant_for_each_species["Sumatran"])),Candidates_Sumatran$unit)
#match(as.character(unlist(most_abundant_for_each_species["Bornean"])),Candidates_Bornean$unit)

View(as.data.frame(do.call(rbind,(apply(matrix_of_most_abundant,2,function(y) {sapply(top_candidates_uniq,function(x) {which(y==x)})}))))) #dataframe

#print(binary[Candidates_Homo$unit,])
print(binary[Candidates_Chimpanzee$unit,])
print(binary[Candidates_Bonobo$unit,])
print(binary[Candidates_Gorilla$unit,])
#print(binary[Candidates_Sumatran$unit,])
#print(binary[Candidates_Bornean$unit,])
@


<<Figure S2>>=
density_by_sample<-as.data.frame(colSums(density))
density_by_sample$Run<-gsub("\\_.*","",rownames(density_by_sample))
colnames(density_by_sample)<-c("density","Run")

density_vs_count<-merge(density_by_sample,rc_by_sample)
plot(density_vs_count$rCount,density_vs_count$density,main ="Number of reads in a sample is independent of the repeat density in a sample",xlab="number of reads",ylab="repeat density",cex=2)
cor(density_vs_count$rCount,density_vs_count$density,method="spearman")
@

<<plot color scheme for the heatmaps; legend>>=
par(cex=1.5)
light_colors<-rev(c("#ffd5d5","#adffad","#d2e8ff","#dbdbdb","#fef6cc","#ffe3c8"))
dark_colors<-rev(c("firebrick1","darkgreen","dodgerblue","gray30","gold","darkorange2"))

col_breaks = c(seq(0,0.099,length=100),  #light
               seq(0.1,1,length=100), 
               seq(1.001,2,length=100),
               seq(2.001,5,length=100),
               seq(5.001,22.12,length=100))             #dark

plot(NA,NA,ylim=c(0,7),xlim=c(-50,550),main="legend")
offset_legend<-0.175 
for (i in 1:6) {
  #tiff(file=paste0(i,"_",dark_colors[i],"legend.tiff"),units="px", width=3000, height=2000, res=300,compression="rle")
  my_palette <- colorRampPalette(c(light_colors[i],dark_colors[i]))(n = 499)
  points(1:499,rep(i,499),pch=19,col=my_palette,ylim=c(0,1.5),xlim=c(-50,550),main=paste0(i,"_",dark_colors[i]))
  abline(v=seq(0,500,100),col="white")
}

for (i in 1:6) {
  text(0,i + offset_legend,labels="<0.01 kb/Mb")
  text(100,i + offset_legend,labels="0.1 kb/Mb")
  text(200,i + offset_legend,labels="1 kb/Mb")
  text(300,i + offset_legend,labels="2 kb/Mb")
  text(400,i + offset_legend,labels="5 kb/Mb")
  text(500,i + offset_legend,labels="<=22.1 kb/Mb") 
}

#dev.off()
@














