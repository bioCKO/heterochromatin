<<>>=
library("h5r")
library("pbh5")
library("data.table")
par(mfrow=c(3,3))
setwd("/Users/alice/Desktop/projects/kinetics/passes")
cmpH5 = PacBioCmpH5("/Users/alice/Desktop/projects/kinetics/chr21_P6_sorted.cmp.h5")
passesStat<-read.table("/Users/alice/Desktop/projects/kinetics/passes/21.EmptyFeatureOnly.mf.gff.intersect")

linkage<-paste(cmpH5$movieName,cmpH5$moleculeID,sep="_")
association<-as.data.frame(cbind(cmpH5$ID,as.numeric(factor(linkage))))
association$movieName<-cmpH5$movieName
association$moleculeID<-cmpH5$moleculeID
association$alignedStrand<-cmpH5$alignedStrand
association$rStart<-cmpH5$rStart
association$rEnd<-cmpH5$rEnd
colnames(association)<-c("idx","linkage","movieName","moleculeID","strand","rStart","rEnd")
association<-as.data.table(association)

start<-9829589
end<-9829616
chromosome<-"chr21"

calculateIPDforWindow <- function(chromosome,start,end,numberOfPasses) { 
  subreads<-getReadsInRange(cmpH5, chromosome, start, end)
  print(paste(chromosome,start,end))
  print(subreads)
  #print(paste("number of passes:",numberOfPasses))
  
  #print(length(subreads))
  myColors <- c("red", "blue")
  bind <- NULL
  
  print(paste(chromosome,start,end))
  molecules <- association[association$idx %in% subreads,] #keep only associated subreads
  
  
  
  for (mol in split(molecules, by = c("moleculeID"))) { 
    m<-unique(mol$moleculeID)
    print(paste("moleculeID: ",m))
    chunk <- mol[order(mol$rStart)] #sort subreads by rStart
    subreads_in_mol<-length(mol$idx)
    print(subreads_in_mol)
    #View(getAlignmentBlock(cmpH5, chromosome, start, end))
    if (subreads_in_mol>=numberOfPasses) {
      print(paste("sufficient number of passes: ",length(mol$idx)))
      pass<-0
      for (i in chunk[order(chunk$rStart)]$idx) {
        pass<-pass+1
        print(paste("subread idx:",i,"pass",pass))
        tposIPD <- getByTemplatePosition(cmpH5, idx = i)
        idx_chunk<-tposIPD[tposIPD$position>=start & tposIPD$position<=end,]
        #print(head(idx_chunk))
        
        s <- unique(sort(idx_chunk$strand))
        
        #bind<-qpcR:::cbind.na(bind,paste(idx_chunk$position,idx_chunk$elt))
        IPDbyPOS <-
          as.data.frame(cbind(idx_chunk$position, idx_chunk$elt))
        colnames(IPDbyPOS)[1] <- "position"
        
        insertionRows <-
          as.data.frame(idx_chunk[as.character(idx_chunk$ref) == "-", c("position", "read")])
        deletionRows <-
          as.data.frame(idx_chunk[as.character(idx_chunk$read) == "-", c("position", "ref")])
        mismatchRows <-
          as.data.frame(idx_chunk[as.character(idx_chunk$ref) != as.character(idx_chunk$read) &
                                    (as.character(idx_chunk$ref) != "-") &
                                    (as.character(idx_chunk$read) != "-"), c("position", "read")])
        
        #add data about insertions, deletions, mismatches
        IPDbyPOS <-
          merge(
            IPDbyPOS,
            mismatchRows,
            all.x = TRUE,
            all.y = TRUE,
            suffixes = paste(i, pass, s)
          )
        IPDbyPOS <-
          merge(
            IPDbyPOS,
            deletionRows,
            all.x = TRUE,
            all.y = TRUE,
            suffixes = paste(i, pass, s)
          )
        IPDbyPOS <-
          merge(
            IPDbyPOS,
            insertionRows,
            all.x = TRUE,
            all.y = TRUE,
            suffixes = paste(i, pass, s)
          )
        colnames(IPDbyPOS) <-
          c("position", "insertions", "elt", "deletions")
        
        if (is.null(bind)) {
          bind <- IPDbyPOS
        } else {
          bind <- merge(
            bind,
            IPDbyPOS,
            by = "position",
            all.y = TRUE,
            all.x = TRUE
          )
        }
        
        colnames(bind)[(ncol(bind) - 2):ncol(bind)] <-
          paste(colnames(bind)[(ncol(bind) - 2):ncol(bind)], i, pass, s)
        #
        
        plot(
          idx_chunk$position,
          idx_chunk$elt,
          ylim = c(0, 10),
          col = myColors[s + 1],
          ylab = "IPD",
          xlab = "position in reference",
          main = paste("molecule:", m, "| PASS:", pass, "|", "nan"),
          sub = paste(
            "idx:",
            i,
            "strand:",
            s,
            "rStart:",
            chunk[chunk$idx==i]$rStart,
            "rEnd:",
            chunk[chunk$idx==i]$rEnd
          )
        )
        #print(head(idx_chunk))
        
      }
      write.table(
        #only plot if molecule has multiple subreads
        as.matrix(bind),
        file = paste0("filename", "_", "nan", ".IPDs.txt"),
        col.names = TRUE,
        row.names = FALSE,
        quote = FALSE,
        sep = "\t",
        append = TRUE
      )
      
    }  
  }
}

calculateIPDforWindow("chr21",9426500,9426599,3)

#coordinates<-as.data.frame(unique(cbind(passesStat$V1,passesStat$V4,passesStat$V5)))
#by(coordinates, 1:nrow(coordinates), function(row) calculateIPDforWindow(paste0("chr",row[1]),row[2],row[3],4))


#all_molecules<-unique(passesStat$V12)
#print(head(all_molecules))

#calculateIPDforWindow(chromosome,start,end)
  